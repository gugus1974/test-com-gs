C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE PIO
OBJECT MODULE PLACED IN .\exe\pio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\pio.c OPTIMIZE(SIZE) CODE SYMBOLS PRINT(.\lst\pio.lst) PREPRINT(.\lst\p
                    -io.i) OBJECT(.\exe\pio.obj)

line level    source

   1          /*************************************************************************************/
   2          /* 06/01/10              \SRC\pio.c                                                                              */
   3          /*************************************************************************************/
   4          #include <ctype.h>
   5          
   6          #include "reg51.h"
   7          #include "stdio.h"
   8          #include "pio.h"
   9          
  10          /*************************************************************************************/
  11          
  12          sbit P1_3 = P1^3;
  13          sbit P1_4 = P1^4;
  14          sbit P1_5 = P1^5;
  15          sbit P1_6 = P1^6;
  16          #define P1_7   PIO_RESET
  17          /*************************************************************************************/
  18          
  19          volatile unsigned char  xdata  U26[4] _at_ PIO_U26_PA_ADDR;
  20          volatile unsigned char  xdata  U29[4] _at_ PIO_U29_PA_ADDR;
  21          volatile unsigned char  xdata  buff_U37 _at_ 0xE000;
  22          volatile unsigned char  xdata  buff_U38 _at_ 0xC000;
  23          
  24          /*************************************************************************************/
  25          static unsigned char xdata cont=0;
  26          static unsigned short xdata start_ritardo=0;
  27          static unsigned char xdata error;       
  28          static unsigned char xdata error_PA;    
  29          static unsigned char xdata error_U38;   
  30          static unsigned char xdata esito_test_led_off;  
  31          static unsigned char xdata esito_test_led_on;   
  32          static unsigned char xdata esito_test_sw1;      
  33          static unsigned char xdata esito_test_u15;      
  34          static unsigned char xdata esito_test_u26_pb;   
  35          static unsigned char xdata esito_test_u26_pc;   
  36          static unsigned char xdata esito_test_u29_pa;   
  37          static unsigned char xdata esito_test_u38;      
  38          static unsigned char xdata esito_test_pio;      
  39          extern unsigned char del;       
  40          static unsigned char xdata c;   
  41          static unsigned char xdata i;
  42          static unsigned char xdata mask, mask2;
  43          
  44          /*************************************************************************************/
  45          unsigned char ins_stato_led();
  46          
  47          unsigned char test_U15();  //test porta OUT da P1 del micro
  48          unsigned char test_U26_PC();      // test pilotaggio relè
  49          unsigned char test_U26_PB();      // test pilotaggio led e rilettura
  50          unsigned char test_U29_PA();      // test pilotaggio led e rilettura
  51          unsigned char test_U38();         // test pilotaggio led e rilettura
  52          unsigned char test_SW1();
  53          /*************************************************************************************/
  54          
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 2   

  55          unsigned char xdata exit;       
  56          char scelta;
  57          //extern int get_timer0();
  58          //void print_pio_port (void);
  59          /*************************************************************************************/
  60          
  61          
  62          void pio_reset()
  63          {
  64   1              /* si puliscono i registri di controllo dei PIO*/
  65   1              PIO_RESET = 1;
  66   1              DELAY;
  67   1              DELAY;
  68   1              PIO_RESET = 0;
  69   1              printf("Reset PIO\n");
  70   1      }
  71          /*void test_registri()
  72          {
  73                  // si puliscono i registri di controllo dei PIO
  74                  PIO_RESET = 1;
  75                  DELAY;
  76                  DELAY;
  77                  PIO_RESET = 0;
  78                  printf("reset registri PIO\n");
  79          
  80                  U26[CR] = PIO_U26_CONF;   // scrittura del Control Register
  81          //      U29[CR] = PIO_U29_CONF;   // scrittura del Control Register
  82                  DELAY;
  83          
  84                  while(1)
  85                  {
  86                          printf("U26 CR KO (%bx %bx)\r",U26[CR],PIO_U26_CONF);
  87                  //      printf("U29 CR KO (%bx %bx)\n\n",U29[CR],PIO_U29_CONF);
  88                          
  89                  }
  90          }
  91          */
  92          void pio_conf()
  93          {
  94   1              // U26  PA:in  PB:out  PC:out
  95   1              // U29  PA:out PB:in   PC:in
  96   1              printf("CONF PIO U26 ");
  97   1              U26[CR] = PIO_U26_CONF;   // scrittura del Control Register
  98   1      /*      if( (~U26[CR]) == PIO_U26_CONF)
  99   1                      printf(" OK\n");
 100   1              else
 101   1                      printf(" *KO* (%bx)\n",~U26[CR]);
 102   1      */
 103   1              printf("CONF PIO U29 ");
 104   1              U29[CR] = PIO_U29_CONF;   // scrittura del Control Register
 105   1      /*      if((~U29[CR]) == PIO_U29_CONF)
 106   1                      printf(" OK\n");
 107   1              else
 108   1                      printf(" *KO* (%bx)\n",~U29[CR]);
 109   1      */
 110   1      }
 111          void test_pio_menu()
 112          {
 113   1              unsigned char   exit_menu; 
 114   1              
 115   1              char c;
 116   1              do
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 3   

 117   1              {
 118   2                      printf("\n\n");
 119   2                      printf("***********************************\n");
 120   2                      printf("*   scelta test PIO               *\n");
 121   2                      printf("***********************************\n");
 122   2                      printf("\n");
 123   2                      printf("         1 - comando reset\n");
 124   2                      printf("         2 - configurazione registri\n");
 125   2                      printf("         3 - test I/O completo\n");
 126   2                      printf("         4 - test lettura SW1 \n");
 127   2                      printf("         5 - test pilotaggio relè U15 \n");
 128   2                      printf("         6 - test output U26 PB \n");
 129   2                      printf("         7 - test output U26 PC \n");
 130   2                      printf("         8 - test output U29 PA \n");
 131   2                      printf("         9 - test output U38 \n");
 132   2                      printf("         0 - menu principale\n");
 133   2                      printf ("\n     Scelta test: ");
 134   2                      c = _getkey();
 135   2                      
 136   2                      scelta = c-0x30;
 137   2      
 138   2                      exit_menu=0; //evita di tornare al menu principale
 139   2                      
 140   2                      if(scelta>=0 && scelta<10)
 141   2                      {
 142   3                      
 143   3                              switch (scelta)
 144   3                              {
 145   4                              case 1:         pio_reset();
 146   4                                                      break;
 147   4                              case 2:         pio_conf();
 148   4                                                      break;
 149   4                              case 3:         test_pio();
 150   4                                                      break;
 151   4                              case 4:         
 152   4                                                      pio_reset();
 153   4                                                      pio_conf();
 154   4                                                      test_SW1();
 155   4                                                      break;
 156   4                              case 5:         test_U15();
 157   4                                                      break;
 158   4                              case 6:         
 159   4                                                      pio_reset();
 160   4                                                      pio_conf();
 161   4                                                      test_U26_PB();
 162   4                                                      break;
 163   4                              case 7:         
 164   4                                                      pio_reset();
 165   4                                                      pio_conf();
 166   4                                                      test_U26_PC();
 167   4                                                      break;
 168   4                              case 8:         
 169   4                                                      pio_reset();
 170   4                                                      pio_conf();
 171   4                                                      test_U29_PA();
 172   4                                                      break;
 173   4                              case 9:         
 174   4                                                      pio_reset();
 175   4                                                      pio_conf();
 176   4                                                      test_U38();
 177   4      
 178   4                                                      break;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 4   

 179   4      
 180   4      /*                      case 9:         test_registri();
 181   4                                                      break;
 182   4      */
 183   4                              case 0:         
 184   4                              default:        exit_menu=1; //ritorno al menù principale
 185   4                                                      break;
 186   4                              }
 187   3                      }
 188   2              }
 189   1              while(!exit_menu);
 190   1              
 191   1      }
 192          
 193          
 194          /*
 195          static void shift_test (unsigned char *p_out, unsigned char * p_in )
 196          {
 197              mask =0x01;
 198                  error = 0;
 199                  p_out = 0; 
 200                  DELAY;          
 201                  if(*p_out != *p_in) // ??
 202                  {
 203                          error = 1;
 204                          printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*p_out,*p_in); 
 205                  }
 206          
 207                  *p_out = 1;
 208                  cont = 1;
 209                  exit =0;
 210          
 211                  start_ritardo = get_timer0(); 
 212              do
 213                  {
 214                          if((get_timer0() - start_ritardo) == 16 )
 215                          {// eseguito ogni 10 * 50ms
 216                                  if(cont<8)
 217                                  {
 218                                          *p_out <<= 1; 
 219                                          DELAY;          
 220                                          if(*p_out != *p_in) // ??
 221                                          {
 222                                                  error = 1;
 223                                  printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*p_out,*p_in); 
 224                                          }
 225                                          cont++;
 226                                  }
 227                                  else
 228                                          exit =1;
 229                                  start_ritardo = get_timer0();
 230                          }
 231                          printf("\n");
 232                          print_char_bin(*U29_PA),printf("\r");
 233                  }
 234                  while ( !exit) ;
 235          }
 236          
 237          */
 238          
 239          
 240          unsigned char  test_U26_PB()      // test pilotaggio led e rilettura
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 5   

 241          {
 242   1              static unsigned char err_cnt;
 243   1              err_cnt =0;
 244   1      
 245   1      
 246   1              printf("\n\nTEST U26 porta B con rilettura su U29 porta C\n");
 247   1              printf("\nVerificare accensione dei led U13 (U26 PB = 00H) \n");
 248   1      
 249   1              U26[PB] = 0x00; 
 250   1              DELAY;
 251   1              if( (U29[PC]& 0x3f )==0x0F )
 252   1                      printf("rilettura su U29.PC OK (0x%02bx)\n",(U29[PC]));
 253   1              else{
 254   2                      printf("!!! ERRATA rilettura su U29.PC  (0x%02bx invece di 0x0F)\n",(U29[PC]));
 255   2                      err_cnt++ ;
 256   2              }
 257   1              printf("premi <INVIO>\n");      while ( (c = getchar())!= 0x0A) ;
 258   1      
 259   1              printf("\nVerificare spegnimento dei led U13 (U26 PB = FFH)\n");
 260   1              U26[PB] = 0xff; 
 261   1              DELAY;
 262   1              if( (U29[PC]& 0x3f )==0x30 )
 263   1                      printf("rilettura su U29.PC OK (0x%02bx)\n",(U29[PC]));
 264   1              else{
 265   2                      printf("!!! ERRATA rilettura su U29.PC  (0x%02bx)\n",(U29[PC]));
 266   2                      err_cnt++ ;
 267   2              }
 268   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 269   1      
 270   1      //      U26[PB] = 0xff; // spegne i led 
 271   1              mask = 0x01;
 272   1              
 273   1              for(i=0; i<4; i++) //
 274   1              {
 275   2                  U26[PB] = 0xff;     // spegne i led
 276   2                      U26[PB] &= ~mask;  //pone a 0 il bit i-simo
 277   2                      printf("\nTest U26.PB%bd (0x%02bx) - Verificare accensione U13 led %bd\n",i,U26[PB],i+2);
 278   2                      
 279   2                      if( (U29[PC]& 0x3f) == (0x30| mask))
 280   2                              printf("rilettura su U29.PC OK (0x%02bx)\n",(U29[PC]));
 281   2                      else{
 282   3                              printf("!!! ERRATA rilettura su U29.PC (0x%02bx)\n",(U29[PC]));
 283   3                              err_cnt++ ;
 284   3                              }
 285   2              
 286   2                      mask <<=1;
 287   2                      printf("premi <INVIO>\n");
 288   2                      while ( (c = getchar())!= 0x0A) ;
 289   2              }
 290   1      
 291   1              for(i=4; i<6; i++) //
 292   1              {
 293   2                  U26[PB] = 0xff;     // spegne i led
 294   2                      U26[PB] &= ~mask;  //pone a 0 il bit i-simo
 295   2                      printf("\nTest U26.PB%bd (0x%02bx) - Verificare accensione U13 led %bd\n",i,U26[PB],i+2);
 296   2                      
 297   2                      if( (U29[PC]& 0x3f) == (0x30&(~mask)))
 298   2                              printf("rilettura su U29.PC OK (0x%02bx)\n",(U29[PC]));
 299   2                      else{
 300   3                              printf("!!! ERRATA rilettura su U29.PC (0x%02bx)\n",(U29[PC]));
 301   3                              err_cnt++ ;
 302   3                              }
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 6   

 303   2              
 304   2                      mask <<=1;
 305   2                      printf("premi <INVIO>\n");      while ( (c = getchar())!= 0x0A) ;
 306   2              }
 307   1      
 308   1          U26[PB] = 0xff;     // spegne i led
 309   1              U26[PB] &= ~mask;  //pone a 0 il bit i-simo
 310   1              printf("\nTest U26.PB6 (0x%02bx)- Verificare accensione U13 led %bd\n",U26[PB],8);
 311   1              if(ins_stato_led() != 0)
 312   1                      err_cnt++ ;
 313   1      
 314   1      //      printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 315   1      
 316   1              mask <<=1;
 317   1      
 318   1          U26[PB] = 0xff;     // spegne i led
 319   1              U26[PB] &= ~mask;  //pone a 0 il bit i-simo
 320   1              printf("\nTest U26.PB7 (0x%02bx)- Verificare accensione U13 led %bd\n",U26[PB],9);
 321   1              if(ins_stato_led() != 0)
 322   1                      err_cnt++ ;
 323   1      
 324   1      //      printf("menu <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 325   1              if (err_cnt!=0) return 1;
 326   1              return 0;
 327   1      }
 328          
 329          unsigned char  test_U26_PC()      // test pilotaggio relè
 330          {
 331   1              unsigned char ret;
 332   1              ret =0;
 333   1              printf("\n\nTEST U26 porta C\n");
 334   1              U26[PC] = 0x00; // init 
 335   1              mask = 0x01;
 336   1              
 337   1              for(i=0; i<8; i++) //
 338   1              {
 339   2                      U26[PC] = mask;
 340   2                      printf("\nVerificare accensione U12 led %bd",i+2);
 341   2              mask <<=1;
 342   2                      ret =ret + ins_stato_led();
 343   2                      //while ( (c = getchar())!= 0x0A) ;
 344   2              }
 345   1              return ret;
 346   1      }
 347          
 348          unsigned char  test_U29_PA()      // test pilotaggio led e rilettura
 349          {
 350   1              static unsigned char err_cnt=0;
 351   1              printf("\nTEST U29 porta A con rilettura su U26 porta A\n");
 352   1              error_PA =0;
 353   1              mask = 1;
 354   1      
 355   1              buff_U38 = 0x80;// per abilitare l'uscita di PA0
 356   1              U29[PA] = 0x01; //PA0 è invertito
 357   1              printf("\nVerificare accensione dei led U14 (U29 PA = 01H) \n");
 358   1              if( (U26[PA]& 0x3F )==0x3f )
 359   1                      printf("rilettura su U26.PA OK (0x%02bx)\n",(U26[PA]));
 360   1              else{
 361   2                      printf("!!! ERRATA rilettura su U26.PA (0x%02bx)\n",(U26[PA]));
 362   2                      err_cnt++ ;
 363   2                      }
 364   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 7   

 365   1      
 366   1      
 367   1              buff_U38 = 0x80;// per abilitare l'uscita di PA0
 368   1              U29[PA] = 0xFE; //PA0 è invertito
 369   1              printf("\nVerificare spegnimento dei led U14 (U29 PA = FEH)\n");
 370   1              if( (U26[PA]& 0x3F )==0x00 )
 371   1                      printf("rilettura su U26.PA OK (0x%02bx)\n",(U26[PA]));
 372   1              else{
 373   2                      printf("!!! ERRATA rilettura su U26.PA (0x%02bx)\n",(U26[PA]));
 374   2                      err_cnt++ ;
 375   2                      }
 376   1              printf("premi <INVIO>\n");      while ( (c = getchar())!= 0x0A) ;
 377   1      
 378   1              // TEST PA0 =
 379   1              buff_U38 = 0x80;// per abilitare l'uscita di PA0
 380   1          U29[PA] = 0xFF;     // spegne i led  , accende su U14 led 2
 381   1              i=0;
 382   1              printf("\nTest U29.PA%bd (0x%02bx) - Verificare accensione U14 led %bd\n",i,U29[PA],i+2);
 383   1              if(ins_stato_led() != 0)
 384   1                      err_cnt++ ;
 385   1      //      printf("premi <INVIO>\n");      while ( (c = getchar())!= 0x0A) ;
 386   1      
 387   1              buff_U38 = 0x80;// per abilitare l'uscita di PA0
 388   1          U29[PA] = 0xFE;     // spegne i led
 389   1              i=0;
 390   1              printf("\nTest U29.PA%bd (0x%02bx) - Verificare spegnimento U14 led %bd\n",i,U29[PA],i+2);
 391   1              if(ins_stato_led() != 0)
 392   1                      err_cnt++ ;
 393   1      //      printf("premi <INVIO>\n");      while ( (c = getchar())!= 0x0A) ;
 394   1      
 395   1              mask = 0x02;
 396   1              mask2 = 0x01;
 397   1              for(i=1; i<8; i++) //
 398   1              {
 399   2                  U29[PA] = 0xFE;     // spegne i led
 400   2                      U29[PA] &= ~mask;  //pone a 0 il bit i-simo
 401   2                      printf("\nTest U29.PA%bd (0x%02bx) - Verificare accensione U14 led %bd\n",i,U29[PA],i+2);
 402   2                      if(i<7){                
 403   3                              if( U26[PA] ==  mask2)
 404   3                                      printf("rilettura su U26.PA OK (0x%02bx)\n",(U26[PA]));
 405   3                              else{
 406   4                                      printf("!!! ERRATA rilettura su U26.PA (0x%02bx)\n",(U26[PA]));
 407   4                                      err_cnt++ ;
 408   4                                      }
 409   3              }
 410   2                      mask <<=1;
 411   2                      mask2 <<=1;
 412   2                      printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 413   2              }
 414   1      
 415   1              if( (U26[PA]&0x40) == 0)
 416   1                      printf("lettura pin U26.PA6 OK (0x%02bx)\n",(U26[PA]));
 417   1              else{
 418   2                      printf("!!! ERRATA lettura su U26.PA6 (0x%02bx)\n",(U26[PA]));
 419   2                      err_cnt++ ;
 420   2              }
 421   1              esito_test_sw1 =0;
 422   1              esito_test_sw1 = test_SW1();
 423   1              
 424   1              if (err_cnt!=0  || esito_test_sw1) return 1;//test KO
 425   1              return 0; //test OK
 426   1      
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 8   

 427   1      }
 428          
 429          
 430          
 431          unsigned char  test_SW1()
 432          {
 433   1              static unsigned char err_cnt;
 434   1      
 435   1              err_cnt =0;
 436   1              esito_test_sw1 =0;
 437   1              printf("\n\nTEST  SW1\n");
 438   1      
 439   1              printf("\nPosizionare SW1 su ON e ");
 440   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 441   1              
 442   1              if( (U26[PA]& 0x80) ==0x80 )
 443   1                      printf("rilettura su U26.PA7 OK (0x%02bx)\n",(U26[PA]));
 444   1              else{
 445   2                      printf("!!! ERRATA rilettura su U26.PA7 (0x%02bx)\n",(U26[PA]));
 446   2                      err_cnt=1 ;
 447   2              }
 448   1              
 449   1              printf("\nPosizionare SW1 su OFF e ");
 450   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 451   1              
 452   1              if( (U26[PA]& 0x80 )!= 0x80)
 453   1                      printf("rilettura su U26.PA7 OK (0x%02bx)\n",(U26[PA]));
 454   1              else{
 455   2                      printf("!!! ERRATA rilettura su U26.PA7 (0x%02bx)\n",(U26[PA]));
 456   2                      err_cnt=2 ;
 457   2              }
 458   1      
 459   1              return err_cnt;
 460   1      
 461   1      }
 462          
 463          unsigned char  test_U38()         // test pilotaggio led e rilettura
 464          {
 465   1              static unsigned char err_cnt;
 466   1              printf("\n\nTEST U38\n");
 467   1              err_cnt = 0;
 468   1      
 469   1              buff_U38 = 0x00;//  led  on
 470   1              printf("Verificare accensione dei led U15 (U38 = 0x00) \n");
 471   1              
 472   1              if( U29[PB] == 0xFF )
 473   1                      printf("rilettura su U29.PB OK (0x%02bx)\n",(U29[PB]));
 474   1              else{
 475   2                      printf("!!! ERRATA rilettura su U29.PB (0x%02bx)\n",(U29[PB]));
 476   2                      err_cnt++;
 477   2              }
 478   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 479   1      
 480   1              buff_U38 = 0xFF;//  led  off
 481   1              printf("Verificare spegnimento dei led U15 (U38 = 0xff) \n");
 482   1              if( U29[PB] == 0x00 )
 483   1                      printf("rilettura su U29.PB OK (0x%02bx)\n",(U29[PB]));
 484   1              else{
 485   2                      printf("!!! ERRATA rilettura su U29.PB (0x%02bx)\n",(U29[PB]));
 486   2                      err_cnt++;
 487   2              }
 488   1              printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 9   

 489   1      
 490   1              mask = 0x01;
 491   1              for(i=0; i<8; i++) 
 492   1              {
 493   2                      buff_U38 = 0xFF;//  led  off
 494   2                      buff_U38 = 0xFF & (~mask) ;  // pone a 0 il bit i-simo
 495   2                      printf("Test U38.P%bd (0x%02bx) - Verificare accensione su U15 del LED %bd\n",(19-i),(0xFF & (~mask)),(i
             -+2));
 496   2                      if( U29[PB] == mask)
 497   2                                      printf("rilettura su U29.PB OK (0x%02bx)\n",(U29[PB]));
 498   2                              else{
 499   3                                      printf("!!! ERRATA rilettura su U29.PB (0x%02bx)\n",(U29[PB]));
 500   3                                      err_cnt++;
 501   3                              }
 502   2                      mask <<=1;
 503   2                      printf("premi <INVIO>\n");while ( (c = getchar())!= 0x0A) ;
 504   2              }
 505   1              if (err_cnt!=0 ) return 1;//test KO
 506   1              return 0; //test OK
 507   1      
 508   1      }
 509          
 510          
 511          
 512          unsigned char  test_U15() //test porta OUT da P1 del micro
 513          {
 514   1              static unsigned char err_cnt;
 515   1              err_cnt =0;
 516   1      
 517   1              printf("\n\nTEST U15 porta P1 \n");
 518   1              P1_3 = 1;
 519   1              P1_4 = 0;
 520   1              P1_5 = 0;
 521   1              P1_6 = 0;
 522   1              P1_7 = 1;
 523   1              printf("\nVerifica accensione U11 led 2");
 524   1          if(ins_stato_led()!=0) err_cnt++;
 525   1      //      while ( (c = getchar())!= 0x0A) ;
 526   1              
 527   1              P1_3 = 0;
 528   1              P1_4 = 1;
 529   1              printf("\nVerifica accensione U11 led 3");
 530   1          if(ins_stato_led()!=0) err_cnt++;
 531   1      //    while ( (c = getchar())!= 0x0A) ;
 532   1      
 533   1              P1_4 = 0;
 534   1              P1_5 = 1;
 535   1              printf("\nVerifica accensione U11 led 4");
 536   1          if(ins_stato_led()!=0) err_cnt++;
 537   1      //    while ( (c = getchar())!= 0x0A) ;
 538   1      
 539   1              P1_5 = 0;
 540   1              P1_6 = 1;
 541   1              printf("\nVerifica accensione U11 led 5");
 542   1          if(ins_stato_led()!=0) err_cnt++;
 543   1      //    while ( (c = getchar())!= 0x0A) ;
 544   1      
 545   1              P1_6 = 0;
 546   1      
 547   1              buff_U37 = 1;
 548   1              printf("\nVerifica accensione U11 led 6");
 549   1          if(ins_stato_led()!=0) err_cnt++;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 10  

 550   1      //    while ( (c = getchar())!= 0x0A) ;
 551   1              buff_U37 = 0;
 552   1      
 553   1              P1_7 = 1;
 554   1              printf("\nVerifica accensione U11 led 7");
 555   1              P1_7 = 0;
 556   1          if(ins_stato_led()!=0) err_cnt++;
 557   1      //    while ( (c = getchar())!= 0x0A) ;
 558   1              if (err_cnt!=0 ) return 1;//test KO
 559   1              return 0; //test OK
 560   1      }
 561          
 562          
 563          
 564          static unsigned char test_led_OFF()
 565          {
 566   1              esito_test_led_off =0;
 567   1              buff_U38 = 0xff;  // led spenti
 568   1      //      printf("U38 %bx\n",buff_U38);
 569   1              DELAY;
 570   1              buff_U37 = 0;
 571   1      //      printf("U37 %bx\n",buff_U37);
 572   1              P1_3 = 0;
 573   1              P1_4 = 0;
 574   1              P1_5 = 0;
 575   1              P1_6 = 0;
 576   1              P1_7 = 0;
 577   1      //      printf("P1_3..7 = 0\n");
 578   1      
 579   1              U26[PB] = 0xff;
 580   1      //      printf("U26_PB =%bx\n",(unsigned char *)U26[PB]);
 581   1      
 582   1              U26[PC] = 0x00;
 583   1      //      printf("U26_PC =%bx\n",(unsigned char *)U26_PC);
 584   1      
 585   1              U29[PA] = 0xfe;
 586   1      //      printf("U29_PA =%bx\n",(unsigned char *)U29_PA);
 587   1      
 588   1              printf("\n");
 589   1              printf("Verificare che tutti i led siano spenti tranne led 7 di U11\n");
 590   1              return ( ins_stato_led());//(0=OK 1= KO)
 591   1          //while ( (c = getchar())!= 0x0A) ;
 592   1       
 593   1      }
 594          
 595          
 596          static unsigned char test_led_ON()
 597          {
 598   1              esito_test_led_on =0;
 599   1              buff_U38 = 0x00;  // led spenti
 600   1      //      printf("U38 %bx\n",(unsigned char *)buff_U38);
 601   1              buff_U37 = 1;
 602   1      //      printf("U37 %bx\n",(unsigned char *)buff_U37);
 603   1              P1_3 = 1;
 604   1              P1_4 = 1;
 605   1              P1_5 = 1;
 606   1              P1_6 = 1;
 607   1              P1_7 = 0;
 608   1      //      printf("P1_3..7 = 0\n");
 609   1      
 610   1              U26[PB] = 0x00;
 611   1      //      printf("U26_PB =%bx\n",(unsigned char *)U26_PB);
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 11  

 612   1      
 613   1              U26[PC] = 0xff;
 614   1      //      printf("U26_PC =%bx\n",(unsigned char *)U26_PC);
 615   1      
 616   1              U29[PA] = 0x00;
 617   1      //      printf("U29_PA =%bx\n",(unsigned char *)U29_PA);
 618   1      
 619   1              printf("\n");
 620   1              printf("Verificare che tutti i led siano accesi\n");
 621   1              return ( ins_stato_led());//(0=OK 1= KO)
 622   1      }
 623          
 624          
 625          /*
 626          void print_pio_port ()
 627          {
 628                  printf("    bit 7654 3210\n");
 629                  printf("U26  PA "),print_char_bin(*U26_PA),printf("\n");
 630                  printf("U26  PB "),print_char_bin(*U26_PB),printf("\n");
 631                  printf("U26  PC "),print_char_bin(*U26_PC),printf("\n");
 632          
 633                  printf("    bit 7654 3210\n");
 634                  printf("U29  PA "),print_char_bin(*U29_PA),printf("\n");
 635                  printf("U29  PB "),print_char_bin(*U29_PB),printf("\n");
 636                  printf("U29  PC "),print_char_bin(*U29_PC),printf("\n");
 637          
 638          }
 639          
 640          */                                                                        
 641          unsigned char ins_stato_led()
 642          {
 643   1         char e;
 644   1         do{
 645   2                 printf("\n(1=0K 0=KO ):");
 646   2                 e = toupper(getchar());
 647   2         }
 648   1         while ((e != '1')&&(e != '0'));
 649   1      
 650   1         if (e == '0') return 1; //KO
 651   1         return 0; //OK
 652   1      
 653   1      }
 654          void test_pio ()      
 655          {
 656   1              printf("\n\n*****  Test I/O   *****   \n\n");
 657   1              error = 0;
 658   1              
 659   1              printf("\n");
 660   1              pio_reset();    // azzera tutti i registri
 661   1          pio_conf();         // conf registri
 662   1      
 663   1              esito_test_led_on  = 0;
 664   1              esito_test_led_off = 0;
 665   1              esito_test_u26_pc  = 0;
 666   1              esito_test_u26_pb  = 0;
 667   1              esito_test_u29_pa  = 0;
 668   1              esito_test_u38     = 0;
 669   1              esito_test_u15     = 0;
 670   1      
 671   1              esito_test_led_on  = test_led_ON();
 672   1              esito_test_led_off = test_led_OFF();
 673   1      
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 12  

 674   1              esito_test_u26_pc  = test_U26_PC();
 675   1              esito_test_u26_pb  = test_U26_PB();
 676   1              esito_test_u29_pa  = test_U29_PA();
 677   1              esito_test_u38     = test_U38();
 678   1              esito_test_u15     = test_U15();
 679   1      
 680   1              printf ("\n");
 681   1              if(!esito_test_led_on   &&
 682   1                 !esito_test_led_off  &&
 683   1                 !esito_test_u26_pb   &&
 684   1                 !esito_test_u26_pc   &&
 685   1                 !esito_test_u29_pa   &&
 686   1                 !esito_test_u38      &&
 687   1                 !esito_test_u15)
 688   1                      printf("\nTest I/O OK\n");
 689   1              else
 690   1              { 
 691   2                      printf("\nTest I/O KO !! \n" );
 692   2                      if(esito_test_led_on)   printf ("Test led ON  KO\n");
 693   2                      if(esito_test_led_off)  printf ("Test led OFF KO\n");
 694   2                  if(esito_test_u26_pb)   printf ("Test U26 PB  KO\n");
 695   2                  if(esito_test_u26_pc)   printf ("Test U26 PC  KO\n");
 696   2                  if(esito_test_u29_pa)   printf ("Test U29 PA  KO\n");
 697   2                      if(esito_test_u38)      printf ("Test U38     KO\n");
 698   2                      if(esito_test_u15)              printf ("Test U15     KO\n");
 699   2      
 700   2              }
 701   1              printf("Premere un tasto per proseguire.\n");
 702   1          while ( (c = getchar()) !=0x0a) ;
 703   1              
 704   1              
 705   1      /**     
 706   1              test_pio_conf();
 707   1              led_OFF();
 708   1              led_ON();
 709   1              print_pio_port();
 710   1      /*
 711   1              appoggio =       *U26_CR;
 712   1              printf("U26  CR %bx\n",appoggio);
 713   1              appoggio =      (char) *U29_CR;
 714   1              printf("U29  CR %bx\n",appoggio);
 715   1      
 716   1              printf("\n");
 717   1              printf("Premere INVIO per proseguire con 1-shifting sulle USCITE U26_PB\n");
 718   1          while ( (c = getchar())!= 0x0A) ;
 719   1      
 720   1              shift_test(U29_PA,U26_PA );
 721   1                 /*shift di 1 sulle uscite U29 PA*
 722   1              error = 0;
 723   1              U29_PA = 0; 
 724   1              DELAY;          
 725   1              if(*U29_PA != *U29_PA) // ??
 726   1              {
 727   1                      error = 1;
 728   1                      printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U29_PA,*U29_PA); 
 729   1              }
 730   1      
 731   1              *U29_PA = 1;
 732   1              cont = 1;
 733   1              exit =0;
 734   1      
 735   1              start_ritardo = get_timer0(); 
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 13  

 736   1          do
 737   1              {
 738   1                      if((get_timer0() - start_ritardo) == 16 )
 739   1                      {// eseguito ogni 10 * 50ms
 740   1                              if(cont<8)
 741   1                              {
 742   1                                      *U29_PA <<= 1; 
 743   1                                      DELAY;          
 744   1                                      if(*U29_PA != *U29_PA) // ??
 745   1                                      {
 746   1                                              error = 1;
 747   1                                              printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U29_PA,*U29_PA); 
 748   1                                      }
 749   1                                      cont++;
 750   1                              }
 751   1                              else
 752   1                                      exit =1;
 753   1                              start_ritardo = get_timer0();
 754   1                      }
 755   1                      printf("U29  PA "),print_char_bin(*U29_PA),printf("\r");
 756   1              }
 757   1              while ( !exit) ;
 758   1      
 759   1              printf("\n");
 760   1              
 761   1              cont = 0;
 762   1              *U26_PB=0;
 763   1              DELAY;          
 764   1              if(*U26_PB != *U26_PB) // ??
 765   1              {
 766   1                      error = 2;
 767   1                      printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U26_PB,*U26_PB); 
 768   1              }
 769   1      
 770   1              *U26_PB = 1;
 771   1              exit =0;
 772   1              cont = 1;
 773   1              start_ritardo = get_timer0(); 
 774   1          do
 775   1              {
 776   1                      if((get_timer0() - start_ritardo) == 16 )
 777   1                      {// eseguito ogni 10 * 50ms
 778   1                              if(cont<8)
 779   1                              {
 780   1                                      *U26_PB <<= 1; 
 781   1                                      DELAY;          
 782   1                                      if(*U26_PB != *U26_PB) // ??
 783   1                                      {
 784   1                                              error = 2;
 785   1                                              printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U26_PB,*U26_PB); 
 786   1                                      }
 787   1                                      cont++;
 788   1                              }
 789   1                              else
 790   1                              {
 791   1                                      exit =1;
 792   1                              }
 793   1                              start_ritardo = get_timer0();
 794   1                      }
 795   1                      printf("U26  PB "),print_char_bin(*U26_PB),printf("\r");
 796   1              }
 797   1              while ( !exit) ;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 14  

 798   1      
 799   1              printf("\n\n");
 800   1      
 801   1              cont = 0;
 802   1              *U26_PC=0;
 803   1              DELAY;          
 804   1              if(*U26_PC !=*U26_PC) // ??
 805   1              {
 806   1                      error = 3;
 807   1                      printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U26_PC,*U26_PC); 
 808   1              }
 809   1      
 810   1              cont = 1;
 811   1              *U26_PC = 1;
 812   1              exit =0;
 813   1              start_ritardo = get_timer0(); 
 814   1          do
 815   1              {
 816   1                      if((get_timer0() - start_ritardo) == 16 )
 817   1                      {// eseguito ogni 10 * 50ms
 818   1                              if(cont<8)
 819   1                              {
 820   1                                      *U26_PC <<= 1; 
 821   1                                      DELAY;          
 822   1                                      if(*U26_PC!= *U26_PC) // ??
 823   1                                      {
 824   1                                              error = 3;
 825   1                                              printf("Test bit%bd  error:%bd   out:%bx  in:%bx \n",cont,error,*U26_PC,*U26_PC); 
 826   1                                      }
 827   1                                      cont++;
 828   1                              }
 829   1                              else
 830   1                              {
 831   1                                      exit =1;
 832   1                              }
 833   1                              start_ritardo = get_timer0();
 834   1                      }
 835   1                      printf("U26  PC "),print_char_bin(*U26_PC),printf("\r");
 836   1              }
 837   1              while ( !exit) ;
 838   1              
 839   1              printf("\n");
 840   1              printf("Verifiva accensione LED USCITA U36 1 shifting\n");
 841   1              printf("\n");
 842   1      
 843   1              cont = 0;
 844   1              *buff_U37 = 1;
 845   1              start_ritardo = get_timer0(); 
 846   1              exit =0;
 847   1          do
 848   1              {
 849   1                      if((get_timer0() - start_ritardo) == 16 )
 850   1                      {// eseguito ogni 10 * 50ms
 851   1                              if(cont<=7)
 852   1                              {
 853   1                                      *buff_U37 <<= 1; 
 854   1                                      cont++;
 855   1                              }
 856   1                              else
 857   1                              {
 858   1                                      cont = 1;
 859   1                                      exit =1;
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 15  

 860   1                              }
 861   1                              start_ritardo = get_timer0();
 862   1      
 863   1                      }
 864   1                      printf("U37 (b7..b0)  "),print_char_bin((unsigned char *)buff_U37),printf("\r");
 865   1              }
 866   1              while ( !exit) ;
 867   1      
 868   1              printf("\n");
 869   1              printf("Verifiva accensione LED USCITA U36\n");
 870   1              printf("\n");
 871   1      
 872   1              cont = 0;
 873   1              *buff_U38 =1;
 874   1              start_ritardo = get_timer0(); 
 875   1              exit =0;
 876   1          do
 877   1              {
 878   1                      if((get_timer0() - start_ritardo) == 16 )
 879   1                      {// eseguito ogni 10 * 50ms
 880   1                              if(cont<=7)
 881   1                              {
 882   1                                      *buff_U38 <<= 1; 
 883   1                                      cont++;
 884   1                              }
 885   1                              else
 886   1                              {
 887   1                                      cont = 1;
 888   1                                      exit =1;
 889   1                              }
 890   1                              start_ritardo = get_timer0();
 891   1      
 892   1                      }
 893   1                      printf("U38 (b7..b0)  "),print_char_bin((unsigned char *)buff_U38),printf("\r");
 894   1              }
 895   1              while ( !exit) ;
 896   1       
 897   1      
 898   1              printf("\n");
 899   1      
 900   1      
 901   1      
 902   1      
 903   1      
 904   1      
 905   1      
 906   1      
 907   1              if (error)      printf("Test PIO non riuscito (error %bd)\n\n",error);
 908   1      */
 909   1      }
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION pio_reset (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 65
0000 D297              SETB    PIO_RESET
                                           ; SOURCE LINE # 66
0002 E4                CLR     A
0003 F500        E     MOV     del,A
0005         ?C0001:
0005 0500        E     INC     del
0007 E500        E     MOV     A,del
0009 B4C8F9            CJNE    A,#0C8H,?C0001
000C         ?C0002:
                                           ; SOURCE LINE # 67
000C E4                CLR     A
000D F500        E     MOV     del,A
000F         ?C0004:
000F 0500        E     INC     del
0011 E500        E     MOV     A,del
0013 B4C8F9            CJNE    A,#0C8H,?C0004
0016         ?C0005:
                                           ; SOURCE LINE # 68
0016 C297              CLR     PIO_RESET
                                           ; SOURCE LINE # 69
0018 7BFF              MOV     R3,#0FFH
001A 7A00        R     MOV     R2,#HIGH ?SC_0
001C 7900        R     MOV     R1,#LOW ?SC_0
001E 020000      E     LJMP    _printf
             ; FUNCTION pio_reset (END)

             ; FUNCTION pio_conf (BEGIN)
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 96
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_11
0004 7900        R     MOV     R1,#LOW ?SC_11
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 97
0009 904003            MOV     DPTR,#U26+03H
000C 7490              MOV     A,#090H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
000F 7BFF              MOV     R3,#0FFH
0011 7A00        R     MOV     R2,#HIGH ?SC_25
0013 7900        R     MOV     R1,#LOW ?SC_25
0015 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 104
0018 902003            MOV     DPTR,#U29+03H
001B 748B              MOV     A,#08BH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
001E 22                RET     
             ; FUNCTION pio_conf (END)

             ; FUNCTION test_pio_menu (BEGIN)
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0000         ?C0011:
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 17  

                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_39
0004 7900        R     MOV     R1,#LOW ?SC_39
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 119
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_42
000D 7900        R     MOV     R1,#LOW ?SC_42
000F 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 120
0012 7BFF              MOV     R3,#0FFH
0014 7A00        R     MOV     R2,#HIGH ?SC_79
0016 7900        R     MOV     R1,#LOW ?SC_79
0018 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 121
001B 7BFF              MOV     R3,#0FFH
001D 7A00        R     MOV     R2,#HIGH ?SC_42
001F 7900        R     MOV     R1,#LOW ?SC_42
0021 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 122
0024 7BFF              MOV     R3,#0FFH
0026 7A00        R     MOV     R2,#HIGH ?SC_116
0028 7900        R     MOV     R1,#LOW ?SC_116
002A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 123
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_118
0031 7900        R     MOV     R1,#LOW ?SC_118
0033 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 124
0036 7BFF              MOV     R3,#0FFH
0038 7A00        R     MOV     R2,#HIGH ?SC_139
003A 7900        R     MOV     R1,#LOW ?SC_139
003C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 125
003F 7BFF              MOV     R3,#0FFH
0041 7A00        R     MOV     R2,#HIGH ?SC_170
0043 7900        R     MOV     R1,#LOW ?SC_170
0045 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 126
0048 7BFF              MOV     R3,#0FFH
004A 7A00        R     MOV     R2,#HIGH ?SC_195
004C 7900        R     MOV     R1,#LOW ?SC_195
004E 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 127
0051 7BFF              MOV     R3,#0FFH
0053 7A00        R     MOV     R2,#HIGH ?SC_220
0055 7900        R     MOV     R1,#LOW ?SC_220
0057 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 128
005A 7BFF              MOV     R3,#0FFH
005C 7A00        R     MOV     R2,#HIGH ?SC_253
005E 7900        R     MOV     R1,#LOW ?SC_253
0060 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 129
0063 7BFF              MOV     R3,#0FFH
0065 7A00        R     MOV     R2,#HIGH ?SC_280
0067 7900        R     MOV     R1,#LOW ?SC_280
0069 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 130
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 18  

006C 7BFF              MOV     R3,#0FFH
006E 7A00        R     MOV     R2,#HIGH ?SC_307
0070 7900        R     MOV     R1,#LOW ?SC_307
0072 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 131
0075 7BFF              MOV     R3,#0FFH
0077 7A00        R     MOV     R2,#HIGH ?SC_334
0079 7900        R     MOV     R1,#LOW ?SC_334
007B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 132
007E 7BFF              MOV     R3,#0FFH
0080 7A00        R     MOV     R2,#HIGH ?SC_358
0082 7900        R     MOV     R1,#LOW ?SC_358
0084 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 133
0087 7BFF              MOV     R3,#0FFH
0089 7A00        R     MOV     R2,#HIGH ?SC_381
008B 7900        R     MOV     R1,#LOW ?SC_381
008D 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 134
0090 120000      E     LCALL   _getkey
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 136
0093 EF                MOV     A,R7
0094 24D0              ADD     A,#0D0H
0096 F500        R     MOV     scelta,A
                                           ; SOURCE LINE # 138
0098 E4                CLR     A
0099 F500        R     MOV     exit_menu,A
                                           ; SOURCE LINE # 140
009B C3                CLR     C
009C E500        R     MOV     A,scelta
009E 6480              XRL     A,#080H
00A0 9480              SUBB    A,#080H
00A2 407A              JC      ?C0009
00A4 E500        R     MOV     A,scelta
00A6 6480              XRL     A,#080H
00A8 948A              SUBB    A,#08AH
00AA 5072              JNC     ?C0009
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 143
00AC E500        R     MOV     A,scelta
00AE 120000      E     LCALL   ?C?CCASE
00B1 0000        R     DW      ?C0014
00B3 01                DB      01H
00B4 0000        R     DW      ?C0015
00B6 02                DB      02H
00B7 0000        R     DW      ?C0016
00B9 03                DB      03H
00BA 0000        R     DW      ?C0017
00BC 04                DB      04H
00BD 0000        R     DW      ?C0018
00BF 05                DB      05H
00C0 0000        R     DW      ?C0019
00C2 06                DB      06H
00C3 0000        R     DW      ?C0020
00C5 07                DB      07H
00C6 0000        R     DW      ?C0021
00C8 08                DB      08H
00C9 0000        R     DW      ?C0022
00CB 09                DB      09H
00CC 0000              DW      00H
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 19  

00CE 0000        R     DW      ?C0024
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
00D0         ?C0014:
00D0 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 146
00D3 8049              SJMP    ?C0009
                                           ; SOURCE LINE # 147
00D5         ?C0015:
00D5 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 148
00D8 8044              SJMP    ?C0009
                                           ; SOURCE LINE # 149
00DA         ?C0016:
00DA 120000      R     LCALL   test_pio
                                           ; SOURCE LINE # 150
00DD 803F              SJMP    ?C0009
                                           ; SOURCE LINE # 151
00DF         ?C0017:
                                           ; SOURCE LINE # 152
00DF 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 153
00E2 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 154
00E5 120000      R     LCALL   test_SW1
                                           ; SOURCE LINE # 155
00E8 8034              SJMP    ?C0009
                                           ; SOURCE LINE # 156
00EA         ?C0018:
00EA 120000      R     LCALL   test_U15
                                           ; SOURCE LINE # 157
00ED 802F              SJMP    ?C0009
                                           ; SOURCE LINE # 158
00EF         ?C0019:
                                           ; SOURCE LINE # 159
00EF 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 160
00F2 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 161
00F5 120000      R     LCALL   test_U26_PB
                                           ; SOURCE LINE # 162
00F8 8024              SJMP    ?C0009
                                           ; SOURCE LINE # 163
00FA         ?C0020:
                                           ; SOURCE LINE # 164
00FA 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 165
00FD 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 166
0100 120000      R     LCALL   test_U26_PC
                                           ; SOURCE LINE # 167
0103 8019              SJMP    ?C0009
                                           ; SOURCE LINE # 168
0105         ?C0021:
                                           ; SOURCE LINE # 169
0105 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 170
0108 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 171
010B 120000      R     LCALL   test_U29_PA
                                           ; SOURCE LINE # 172
010E 800E              SJMP    ?C0009
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 20  

                                           ; SOURCE LINE # 173
0110         ?C0022:
                                           ; SOURCE LINE # 174
0110 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 175
0113 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 176
0116 120000      R     LCALL   test_U38
                                           ; SOURCE LINE # 178
0119 8003              SJMP    ?C0009
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
011B         ?C0024:
011B 750001      R     MOV     exit_menu,#01H
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
011E         ?C0009:
                                           ; SOURCE LINE # 189
011E E500        R     MOV     A,exit_menu
0120 7003              JNZ     $ + 5H
0122 020000      R     LJMP    ?C0011
                                           ; SOURCE LINE # 191
0125 22                RET     
             ; FUNCTION test_pio_menu (END)

             ; FUNCTION test_U26_PB (BEGIN)
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
0000 E4                CLR     A
0001 F500        R     MOV     err_cnt,A
                                           ; SOURCE LINE # 246
0003 7BFF              MOV     R3,#0FFH
0005 7A00        R     MOV     R2,#HIGH ?SC_401
0007 7900        R     MOV     R1,#LOW ?SC_401
0009 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 247
000C 7BFF              MOV     R3,#0FFH
000E 7A00        R     MOV     R2,#HIGH ?SC_450
0010 7900        R     MOV     R1,#LOW ?SC_450
0012 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 249
0015 E4                CLR     A
0016 904001            MOV     DPTR,#U26+01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
001A F500        E     MOV     del,A
001C         ?C0026:
001C 0500        E     INC     del
001E E500        E     MOV     A,del
0020 B4C8F9            CJNE    A,#0C8H,?C0026
0023         ?C0027:
                                           ; SOURCE LINE # 251
0023 902002            MOV     DPTR,#U29+02H
0026 E0                MOVX    A,@DPTR
0027 543F              ANL     A,#03FH
0029 FF                MOV     R7,A
002A 7BFF              MOV     R3,#0FFH
002C BF0F0C            CJNE    R7,#0FH,?C0029
                                           ; SOURCE LINE # 252
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 21  

002F 7A00        R     MOV     R2,#HIGH ?SC_502
0031 7900        R     MOV     R1,#LOW ?SC_502
0033 E0                MOVX    A,@DPTR
0034 F500        E     MOV     ?_printf?BYTE+03H,A
0036 120000      E     LCALL   _printf
0039 800F              SJMP    ?C0030
003B         ?C0029:
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
003B 7A00        R     MOV     R2,#HIGH ?SC_536
003D 7900        R     MOV     R1,#LOW ?SC_536
003F 902002            MOV     DPTR,#U29+02H
0042 E0                MOVX    A,@DPTR
0043 F500        E     MOV     ?_printf?BYTE+03H,A
0045 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 255
0048 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 256
004A         ?C0030:
                                           ; SOURCE LINE # 257
004A 7BFF              MOV     R3,#0FFH
004C 7A00        R     MOV     R2,#HIGH ?SC_594
004E 7900        R     MOV     R1,#LOW ?SC_594
0050 120000      E     LCALL   _printf
0053         ?C0031:
0053 120000      E     LCALL   getchar
0056 900000      R     MOV     DPTR,#c
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
005B BF0AF5            CJNE    R7,#0AH,?C0031
005E         ?C0032:
                                           ; SOURCE LINE # 259
005E 7BFF              MOV     R3,#0FFH
0060 7A00        R     MOV     R2,#HIGH ?SC_609
0062 7900        R     MOV     R1,#LOW ?SC_609
0064 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 260
0067 904001            MOV     DPTR,#U26+01H
006A 74FF              MOV     A,#0FFH
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
006D E4                CLR     A
006E F500        E     MOV     del,A
0070         ?C0033:
0070 0500        E     INC     del
0072 E500        E     MOV     A,del
0074 B4C8F9            CJNE    A,#0C8H,?C0033
0077         ?C0034:
                                           ; SOURCE LINE # 262
0077 902002            MOV     DPTR,#U29+02H
007A E0                MOVX    A,@DPTR
007B 543F              ANL     A,#03FH
007D FF                MOV     R7,A
007E 7BFF              MOV     R3,#0FFH
0080 BF300C            CJNE    R7,#030H,?C0036
                                           ; SOURCE LINE # 263
0083 7A00        R     MOV     R2,#HIGH ?SC_502
0085 7900        R     MOV     R1,#LOW ?SC_502
0087 E0                MOVX    A,@DPTR
0088 F500        E     MOV     ?_printf?BYTE+03H,A
008A 120000      E     LCALL   _printf
008D 800F              SJMP    ?C0037
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 22  

008F         ?C0036:
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
008F 7A00        R     MOV     R2,#HIGH ?SC_661
0091 7900        R     MOV     R1,#LOW ?SC_661
0093 902002            MOV     DPTR,#U29+02H
0096 E0                MOVX    A,@DPTR
0097 F500        E     MOV     ?_printf?BYTE+03H,A
0099 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 266
009C 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 267
009E         ?C0037:
                                           ; SOURCE LINE # 268
009E 7BFF              MOV     R3,#0FFH
00A0 7A00        R     MOV     R2,#HIGH ?SC_594
00A2 7900        R     MOV     R1,#LOW ?SC_594
00A4 120000      E     LCALL   _printf
00A7         ?C0038:
00A7 120000      E     LCALL   getchar
00AA 900000      R     MOV     DPTR,#c
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
00AF BF0AF5            CJNE    R7,#0AH,?C0038
00B2         ?C0039:
                                           ; SOURCE LINE # 271
00B2 900000      R     MOV     DPTR,#mask
00B5 7401              MOV     A,#01H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
00B8 E4                CLR     A
00B9 900000      R     MOV     DPTR,#i
00BC F0                MOVX    @DPTR,A
00BD         ?C0040:
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
00BD 904001            MOV     DPTR,#U26+01H
00C0 74FF              MOV     A,#0FFH
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#mask
00C8 E0                MOVX    A,@DPTR
00C9 F4                CPL     A
00CA FE                MOV     R6,A
00CB EF                MOV     A,R7
00CC 5E                ANL     A,R6
00CD 904001            MOV     DPTR,#U26+01H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
00D1 7BFF              MOV     R3,#0FFH
00D3 7A00        R     MOV     R2,#HIGH ?SC_704
00D5 7900        R     MOV     R1,#LOW ?SC_704
00D7 900000      R     MOV     DPTR,#i
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC F500        E     MOV     ?_printf?BYTE+03H,A
00DE 904001            MOV     DPTR,#U26+01H
00E1 E0                MOVX    A,@DPTR
00E2 F500        E     MOV     ?_printf?BYTE+04H,A
00E4 EF                MOV     A,R7
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 23  

00E5 2402              ADD     A,#02H
00E7 F500        E     MOV     ?_printf?BYTE+05H,A
00E9 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 279
00EC 902002            MOV     DPTR,#U29+02H
00EF E0                MOVX    A,@DPTR
00F0 543F              ANL     A,#03FH
00F2 FF                MOV     R7,A
00F3 900000      R     MOV     DPTR,#mask
00F6 E0                MOVX    A,@DPTR
00F7 4430              ORL     A,#030H
00F9 7BFF              MOV     R3,#0FFH
00FB B5070F            CJNE    A,AR7,?C0043
                                           ; SOURCE LINE # 280
00FE 7A00        R     MOV     R2,#HIGH ?SC_502
0100 7900        R     MOV     R1,#LOW ?SC_502
0102 902002            MOV     DPTR,#U29+02H
0105 E0                MOVX    A,@DPTR
0106 F500        E     MOV     ?_printf?BYTE+03H,A
0108 120000      E     LCALL   _printf
010B 800F              SJMP    ?C0044
010D         ?C0043:
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
010D 7A00        R     MOV     R2,#HIGH ?SC_767
010F 7900        R     MOV     R1,#LOW ?SC_767
0111 902002            MOV     DPTR,#U29+02H
0114 E0                MOVX    A,@DPTR
0115 F500        E     MOV     ?_printf?BYTE+03H,A
0117 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 283
011A 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 284
011C         ?C0044:
                                           ; SOURCE LINE # 286
011C 900000      R     MOV     DPTR,#mask
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 25E0              ADD     A,ACC
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0124 7BFF              MOV     R3,#0FFH
0126 7A00        R     MOV     R2,#HIGH ?SC_594
0128 7900        R     MOV     R1,#LOW ?SC_594
012A 120000      E     LCALL   _printf
012D         ?C0045:
                                           ; SOURCE LINE # 288
012D 120000      E     LCALL   getchar
0130 900000      R     MOV     DPTR,#c
0133 EF                MOV     A,R7
0134 F0                MOVX    @DPTR,A
0135 BF0AF5            CJNE    R7,#0AH,?C0045
                                           ; SOURCE LINE # 289
0138         ?C0042:
0138 900000      R     MOV     DPTR,#i
013B E0                MOVX    A,@DPTR
013C 04                INC     A
013D F0                MOVX    @DPTR,A
013E E0                MOVX    A,@DPTR
013F C3                CLR     C
0140 9404              SUBB    A,#04H
0142 5003              JNC     $ + 5H
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 24  

0144 020000      R     LJMP    ?C0040
0147         ?C0041:
                                           ; SOURCE LINE # 291
0147 900000      R     MOV     DPTR,#i
014A 7404              MOV     A,#04H
014C F0                MOVX    @DPTR,A
014D         ?C0047:
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
014D 904001            MOV     DPTR,#U26+01H
0150 74FF              MOV     A,#0FFH
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 900000      R     MOV     DPTR,#mask
0158 E0                MOVX    A,@DPTR
0159 F4                CPL     A
015A FE                MOV     R6,A
015B EF                MOV     A,R7
015C 5E                ANL     A,R6
015D 904001            MOV     DPTR,#U26+01H
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0161 7BFF              MOV     R3,#0FFH
0163 7A00        R     MOV     R2,#HIGH ?SC_704
0165 7900        R     MOV     R1,#LOW ?SC_704
0167 900000      R     MOV     DPTR,#i
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C F500        E     MOV     ?_printf?BYTE+03H,A
016E 904001            MOV     DPTR,#U26+01H
0171 E0                MOVX    A,@DPTR
0172 F500        E     MOV     ?_printf?BYTE+04H,A
0174 EF                MOV     A,R7
0175 2402              ADD     A,#02H
0177 F500        E     MOV     ?_printf?BYTE+05H,A
0179 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 297
017C 900000      R     MOV     DPTR,#mask
017F E0                MOVX    A,@DPTR
0180 F4                CPL     A
0181 5430              ANL     A,#030H
0183 FF                MOV     R7,A
0184 902002            MOV     DPTR,#U29+02H
0187 E0                MOVX    A,@DPTR
0188 543F              ANL     A,#03FH
018A 7BFF              MOV     R3,#0FFH
018C B5070C            CJNE    A,AR7,?C0050
                                           ; SOURCE LINE # 298
018F 7A00        R     MOV     R2,#HIGH ?SC_502
0191 7900        R     MOV     R1,#LOW ?SC_502
0193 E0                MOVX    A,@DPTR
0194 F500        E     MOV     ?_printf?BYTE+03H,A
0196 120000      E     LCALL   _printf
0199 800F              SJMP    ?C0051
019B         ?C0050:
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
019B 7A00        R     MOV     R2,#HIGH ?SC_767
019D 7900        R     MOV     R1,#LOW ?SC_767
019F 902002            MOV     DPTR,#U29+02H
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 25  

01A2 E0                MOVX    A,@DPTR
01A3 F500        E     MOV     ?_printf?BYTE+03H,A
01A5 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 301
01A8 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 302
01AA         ?C0051:
                                           ; SOURCE LINE # 304
01AA 900000      R     MOV     DPTR,#mask
01AD E0                MOVX    A,@DPTR
01AE FF                MOV     R7,A
01AF 25E0              ADD     A,ACC
01B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
01B2 7BFF              MOV     R3,#0FFH
01B4 7A00        R     MOV     R2,#HIGH ?SC_594
01B6 7900        R     MOV     R1,#LOW ?SC_594
01B8 120000      E     LCALL   _printf
01BB         ?C0052:
01BB 120000      E     LCALL   getchar
01BE 900000      R     MOV     DPTR,#c
01C1 EF                MOV     A,R7
01C2 F0                MOVX    @DPTR,A
01C3 BF0AF5            CJNE    R7,#0AH,?C0052
                                           ; SOURCE LINE # 306
01C6         ?C0049:
01C6 900000      R     MOV     DPTR,#i
01C9 E0                MOVX    A,@DPTR
01CA 04                INC     A
01CB F0                MOVX    @DPTR,A
01CC E0                MOVX    A,@DPTR
01CD C3                CLR     C
01CE 9406              SUBB    A,#06H
01D0 5003              JNC     $ + 5H
01D2 020000      R     LJMP    ?C0047
01D5         ?C0048:
                                           ; SOURCE LINE # 308
01D5 904001            MOV     DPTR,#U26+01H
01D8 74FF              MOV     A,#0FFH
01DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
01DB E0                MOVX    A,@DPTR
01DC FF                MOV     R7,A
01DD 900000      R     MOV     DPTR,#mask
01E0 E0                MOVX    A,@DPTR
01E1 F4                CPL     A
01E2 FE                MOV     R6,A
01E3 EF                MOV     A,R7
01E4 5E                ANL     A,R6
01E5 904001            MOV     DPTR,#U26+01H
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
01E9 7BFF              MOV     R3,#0FFH
01EB 7A00        R     MOV     R2,#HIGH ?SC_809
01ED 7900        R     MOV     R1,#LOW ?SC_809
01EF E0                MOVX    A,@DPTR
01F0 F500        E     MOV     ?_printf?BYTE+03H,A
01F2 750008      E     MOV     ?_printf?BYTE+04H,#08H
01F5 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 311
01F8 120000      R     LCALL   ins_stato_led
01FB EF                MOV     A,R7
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 26  

01FC 6002              JZ      ?C0054
                                           ; SOURCE LINE # 312
01FE 0500        R     INC     err_cnt
0200         ?C0054:
                                           ; SOURCE LINE # 316
0200 900000      R     MOV     DPTR,#mask
0203 E0                MOVX    A,@DPTR
0204 25E0              ADD     A,ACC
0206 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0207 904001            MOV     DPTR,#U26+01H
020A 74FF              MOV     A,#0FFH
020C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
020D E0                MOVX    A,@DPTR
020E FF                MOV     R7,A
020F 900000      R     MOV     DPTR,#mask
0212 E0                MOVX    A,@DPTR
0213 F4                CPL     A
0214 FE                MOV     R6,A
0215 EF                MOV     A,R7
0216 5E                ANL     A,R6
0217 904001            MOV     DPTR,#U26+01H
021A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
021B 7BFF              MOV     R3,#0FFH
021D 7A00        R     MOV     R2,#HIGH ?SC_869
021F 7900        R     MOV     R1,#LOW ?SC_869
0221 E0                MOVX    A,@DPTR
0222 F500        E     MOV     ?_printf?BYTE+03H,A
0224 750009      E     MOV     ?_printf?BYTE+04H,#09H
0227 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 321
022A 120000      R     LCALL   ins_stato_led
022D EF                MOV     A,R7
022E 6002              JZ      ?C0055
                                           ; SOURCE LINE # 322
0230 0500        R     INC     err_cnt
0232         ?C0055:
                                           ; SOURCE LINE # 325
0232 E500        R     MOV     A,err_cnt
0234 6003              JZ      ?C0056
0236 7F01              MOV     R7,#01H
0238 22                RET     
0239         ?C0056:
                                           ; SOURCE LINE # 326
0239 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 327
023B         ?C0057:
023B 22                RET     
             ; FUNCTION test_U26_PB (END)

             ; FUNCTION test_U26_PC (BEGIN)
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
0000 E4                CLR     A
0001 F500        R     MOV     ret,A
                                           ; SOURCE LINE # 333
0003 7BFF              MOV     R3,#0FFH
0005 7A00        R     MOV     R2,#HIGH ?SC_929
0007 7900        R     MOV     R1,#LOW ?SC_929
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 27  

0009 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 334
000C E4                CLR     A
000D 904002            MOV     DPTR,#U26+02H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0011 900000      R     MOV     DPTR,#mask
0014 04                INC     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
0016 E4                CLR     A
0017 900000      R     MOV     DPTR,#i
001A F0                MOVX    @DPTR,A
001B         ?C0058:
001B 900000      R     MOV     DPTR,#i
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 C3                CLR     C
0021 9408              SUBB    A,#08H
0023 502E              JNC     ?C0059
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0025 900000      R     MOV     DPTR,#mask
0028 E0                MOVX    A,@DPTR
0029 904002            MOV     DPTR,#U26+02H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_949
0031 7900        R     MOV     R1,#LOW ?SC_949
0033 EF                MOV     A,R7
0034 2402              ADD     A,#02H
0036 F500        E     MOV     ?_printf?BYTE+03H,A
0038 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 341
003B 900000      R     MOV     DPTR,#mask
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 25E0              ADD     A,ACC
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
0043 120000      R     LCALL   ins_stato_led
0046 EF                MOV     A,R7
0047 2500        R     ADD     A,ret
0049 F500        R     MOV     ret,A
                                           ; SOURCE LINE # 344
004B 900000      R     MOV     DPTR,#i
004E E0                MOVX    A,@DPTR
004F 04                INC     A
0050 F0                MOVX    @DPTR,A
0051 80C8              SJMP    ?C0058
0053         ?C0059:
                                           ; SOURCE LINE # 345
0053 AF00        R     MOV     R7,ret
                                           ; SOURCE LINE # 346
0055         ?C0061:
0055 22                RET     
             ; FUNCTION test_U26_PC (END)

             ; FUNCTION test_U29_PA (BEGIN)
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 28  

                                           ; SOURCE LINE # 351
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_984
0004 7900        R     MOV     R1,#LOW ?SC_984
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 352
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#error_PA
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
000E 900000      R     MOV     DPTR,#mask
0011 04                INC     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0013 90C000            MOV     DPTR,#buff_U38
0016 7480              MOV     A,#080H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0019 902000            MOV     DPTR,#U29
001C 7401              MOV     A,#01H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
001F 7BFF              MOV     R3,#0FFH
0021 7A00        R     MOV     R2,#HIGH ?SC_1032
0023 7900        R     MOV     R1,#LOW ?SC_1032
0025 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 358
0028 904000            MOV     DPTR,#U26
002B E0                MOVX    A,@DPTR
002C 543F              ANL     A,#03FH
002E FF                MOV     R7,A
002F 7BFF              MOV     R3,#0FFH
0031 BF3F0C            CJNE    R7,#03FH,?C0062
                                           ; SOURCE LINE # 359
0034 7A00        R     MOV     R2,#HIGH ?SC_1084
0036 7900        R     MOV     R1,#LOW ?SC_1084
0038 E0                MOVX    A,@DPTR
0039 F500        E     MOV     ?_printf?BYTE+03H,A
003B 120000      E     LCALL   _printf
003E 800F              SJMP    ?C0063
0040         ?C0062:
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
0040 7A00        R     MOV     R2,#HIGH ?SC_1118
0042 7900        R     MOV     R1,#LOW ?SC_1118
0044 904000            MOV     DPTR,#U26
0047 E0                MOVX    A,@DPTR
0048 F500        E     MOV     ?_printf?BYTE+03H,A
004A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 362
004D 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 363
004F         ?C0063:
                                           ; SOURCE LINE # 364
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH ?SC_594
0053 7900        R     MOV     R1,#LOW ?SC_594
0055 120000      E     LCALL   _printf
0058         ?C0064:
0058 120000      E     LCALL   getchar
005B 900000      R     MOV     DPTR,#c
005E EF                MOV     A,R7
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 29  

005F F0                MOVX    @DPTR,A
0060 BF0AF5            CJNE    R7,#0AH,?C0064
0063         ?C0065:
                                           ; SOURCE LINE # 367
0063 90C000            MOV     DPTR,#buff_U38
0066 7480              MOV     A,#080H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0069 902000            MOV     DPTR,#U29
006C 74FE              MOV     A,#0FEH
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
006F 7BFF              MOV     R3,#0FFH
0071 7A00        R     MOV     R2,#HIGH ?SC_1160
0073 7900        R     MOV     R1,#LOW ?SC_1160
0075 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 370
0078 904000            MOV     DPTR,#U26
007B E0                MOVX    A,@DPTR
007C 543F              ANL     A,#03FH
007E 7BFF              MOV     R3,#0FFH
0080 700C              JNZ     ?C0066
                                           ; SOURCE LINE # 371
0082 7A00        R     MOV     R2,#HIGH ?SC_1084
0084 7900        R     MOV     R1,#LOW ?SC_1084
0086 E0                MOVX    A,@DPTR
0087 F500        E     MOV     ?_printf?BYTE+03H,A
0089 120000      E     LCALL   _printf
008C 800F              SJMP    ?C0067
008E         ?C0066:
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
008E 7A00        R     MOV     R2,#HIGH ?SC_1118
0090 7900        R     MOV     R1,#LOW ?SC_1118
0092 904000            MOV     DPTR,#U26
0095 E0                MOVX    A,@DPTR
0096 F500        E     MOV     ?_printf?BYTE+03H,A
0098 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 374
009B 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 375
009D         ?C0067:
                                           ; SOURCE LINE # 376
009D 7BFF              MOV     R3,#0FFH
009F 7A00        R     MOV     R2,#HIGH ?SC_594
00A1 7900        R     MOV     R1,#LOW ?SC_594
00A3 120000      E     LCALL   _printf
00A6         ?C0068:
00A6 120000      E     LCALL   getchar
00A9 900000      R     MOV     DPTR,#c
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
00AE BF0AF5            CJNE    R7,#0AH,?C0068
00B1         ?C0069:
                                           ; SOURCE LINE # 379
00B1 90C000            MOV     DPTR,#buff_U38
00B4 7480              MOV     A,#080H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
00B7 902000            MOV     DPTR,#U29
00BA 74FF              MOV     A,#0FFH
00BC F0                MOVX    @DPTR,A
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 30  

                                           ; SOURCE LINE # 381
00BD E4                CLR     A
00BE 900000      R     MOV     DPTR,#i
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
00C2 7BFF              MOV     R3,#0FFH
00C4 7A00        R     MOV     R2,#HIGH ?SC_1212
00C6 7900        R     MOV     R1,#LOW ?SC_1212
00C8 F500        E     MOV     ?_printf?BYTE+03H,A
00CA 902000            MOV     DPTR,#U29
00CD E0                MOVX    A,@DPTR
00CE F500        E     MOV     ?_printf?BYTE+04H,A
00D0 E4                CLR     A
00D1 2402              ADD     A,#02H
00D3 F500        E     MOV     ?_printf?BYTE+05H,A
00D5 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 383
00D8 120000      R     LCALL   ins_stato_led
00DB EF                MOV     A,R7
00DC 6002              JZ      ?C0070
                                           ; SOURCE LINE # 384
00DE 0500        R     INC     err_cnt
00E0         ?C0070:
                                           ; SOURCE LINE # 387
00E0 90C000            MOV     DPTR,#buff_U38
00E3 7480              MOV     A,#080H
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
00E6 902000            MOV     DPTR,#U29
00E9 74FE              MOV     A,#0FEH
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
00EC E4                CLR     A
00ED 900000      R     MOV     DPTR,#i
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
00F1 7BFF              MOV     R3,#0FFH
00F3 7A00        R     MOV     R2,#HIGH ?SC_1275
00F5 7900        R     MOV     R1,#LOW ?SC_1275
00F7 F500        E     MOV     ?_printf?BYTE+03H,A
00F9 902000            MOV     DPTR,#U29
00FC E0                MOVX    A,@DPTR
00FD F500        E     MOV     ?_printf?BYTE+04H,A
00FF E4                CLR     A
0100 2402              ADD     A,#02H
0102 F500        E     MOV     ?_printf?BYTE+05H,A
0104 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 391
0107 120000      R     LCALL   ins_stato_led
010A EF                MOV     A,R7
010B 6002              JZ      ?C0071
                                           ; SOURCE LINE # 392
010D 0500        R     INC     err_cnt
010F         ?C0071:
                                           ; SOURCE LINE # 395
010F 900000      R     MOV     DPTR,#mask
0112 7402              MOV     A,#02H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0115 900000      R     MOV     DPTR,#mask2
0118 14                DEC     A
0119 F0                MOVX    @DPTR,A
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 31  

                                           ; SOURCE LINE # 397
011A 900000      R     MOV     DPTR,#i
011D F0                MOVX    @DPTR,A
011E         ?C0072:
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
011E 902000            MOV     DPTR,#U29
0121 74FE              MOV     A,#0FEH
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#mask
0129 E0                MOVX    A,@DPTR
012A F4                CPL     A
012B FE                MOV     R6,A
012C EF                MOV     A,R7
012D 5E                ANL     A,R6
012E 902000            MOV     DPTR,#U29
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0132 7BFF              MOV     R3,#0FFH
0134 7A00        R     MOV     R2,#HIGH ?SC_1212
0136 7900        R     MOV     R1,#LOW ?SC_1212
0138 900000      R     MOV     DPTR,#i
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D F500        E     MOV     ?_printf?BYTE+03H,A
013F 902000            MOV     DPTR,#U29
0142 E0                MOVX    A,@DPTR
0143 F500        E     MOV     ?_printf?BYTE+04H,A
0145 EF                MOV     A,R7
0146 2402              ADD     A,#02H
0148 F500        E     MOV     ?_printf?BYTE+05H,A
014A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 402
014D 900000      R     MOV     DPTR,#i
0150 E0                MOVX    A,@DPTR
0151 C3                CLR     C
0152 9407              SUBB    A,#07H
0154 5029              JNC     ?C0075
                                           ; SOURCE LINE # 403
0156 900000      R     MOV     DPTR,#mask2
0159 E0                MOVX    A,@DPTR
015A FF                MOV     R7,A
015B 904000            MOV     DPTR,#U26
015E E0                MOVX    A,@DPTR
015F 7BFF              MOV     R3,#0FFH
0161 B5070C            CJNE    A,AR7,?C0076
                                           ; SOURCE LINE # 404
0164 7A00        R     MOV     R2,#HIGH ?SC_1084
0166 7900        R     MOV     R1,#LOW ?SC_1084
0168 E0                MOVX    A,@DPTR
0169 F500        E     MOV     ?_printf?BYTE+03H,A
016B 120000      E     LCALL   _printf
016E 800F              SJMP    ?C0075
0170         ?C0076:
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0170 7A00        R     MOV     R2,#HIGH ?SC_1118
0172 7900        R     MOV     R1,#LOW ?SC_1118
0174 904000            MOV     DPTR,#U26
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 32  

0177 E0                MOVX    A,@DPTR
0178 F500        E     MOV     ?_printf?BYTE+03H,A
017A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 407
017D 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
017F         ?C0075:
                                           ; SOURCE LINE # 410
017F 900000      R     MOV     DPTR,#mask
0182 E0                MOVX    A,@DPTR
0183 25E0              ADD     A,ACC
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0186 900000      R     MOV     DPTR,#mask2
0189 E0                MOVX    A,@DPTR
018A FF                MOV     R7,A
018B 25E0              ADD     A,ACC
018D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
018E 7BFF              MOV     R3,#0FFH
0190 7A00        R     MOV     R2,#HIGH ?SC_594
0192 7900        R     MOV     R1,#LOW ?SC_594
0194 120000      E     LCALL   _printf
0197         ?C0078:
0197 120000      E     LCALL   getchar
019A 900000      R     MOV     DPTR,#c
019D EF                MOV     A,R7
019E F0                MOVX    @DPTR,A
019F BF0AF5            CJNE    R7,#0AH,?C0078
                                           ; SOURCE LINE # 413
01A2         ?C0074:
01A2 900000      R     MOV     DPTR,#i
01A5 E0                MOVX    A,@DPTR
01A6 04                INC     A
01A7 F0                MOVX    @DPTR,A
01A8 E0                MOVX    A,@DPTR
01A9 C3                CLR     C
01AA 9408              SUBB    A,#08H
01AC 5003              JNC     $ + 5H
01AE 020000      R     LJMP    ?C0072
01B1         ?C0073:
                                           ; SOURCE LINE # 415
01B1 904000            MOV     DPTR,#U26
01B4 E0                MOVX    A,@DPTR
01B5 7BFF              MOV     R3,#0FFH
01B7 20E60C            JB      ACC.6,?C0080
                                           ; SOURCE LINE # 416
01BA 7A00        R     MOV     R2,#HIGH ?SC_1339
01BC 7900        R     MOV     R1,#LOW ?SC_1339
01BE E0                MOVX    A,@DPTR
01BF F500        E     MOV     ?_printf?BYTE+03H,A
01C1 120000      E     LCALL   _printf
01C4 800F              SJMP    ?C0081
01C6         ?C0080:
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
01C6 7A00        R     MOV     R2,#HIGH ?SC_1373
01C8 7900        R     MOV     R1,#LOW ?SC_1373
01CA 904000            MOV     DPTR,#U26
01CD E0                MOVX    A,@DPTR
01CE F500        E     MOV     ?_printf?BYTE+03H,A
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 33  

01D0 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 419
01D3 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 420
01D5         ?C0081:
                                           ; SOURCE LINE # 421
01D5 E4                CLR     A
01D6 900000      R     MOV     DPTR,#esito_test_sw1
01D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
01DA 120000      R     LCALL   test_SW1
01DD 900000      R     MOV     DPTR,#esito_test_sw1
01E0 EF                MOV     A,R7
01E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
01E2 E500        R     MOV     A,err_cnt
01E4 7003              JNZ     ?C0083
01E6 E0                MOVX    A,@DPTR
01E7 6003              JZ      ?C0082
01E9         ?C0083:
01E9 7F01              MOV     R7,#01H
01EB 22                RET     
01EC         ?C0082:
                                           ; SOURCE LINE # 425
01EC 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 427
01EE         ?C0084:
01EE 22                RET     
             ; FUNCTION test_U29_PA (END)

             ; FUNCTION test_SW1 (BEGIN)
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 435
0000 E4                CLR     A
0001 F500        R     MOV     err_cnt,A
                                           ; SOURCE LINE # 436
0003 900000      R     MOV     DPTR,#esito_test_sw1
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH ?SC_1414
000B 7900        R     MOV     R1,#LOW ?SC_1414
000D 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 439
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH ?SC_1427
0014 7900        R     MOV     R1,#LOW ?SC_1427
0016 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 440
0019 7BFF              MOV     R3,#0FFH
001B 7A00        R     MOV     R2,#HIGH ?SC_594
001D 7900        R     MOV     R1,#LOW ?SC_594
001F 120000      E     LCALL   _printf
0022         ?C0085:
0022 120000      E     LCALL   getchar
0025 900000      R     MOV     DPTR,#c
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
002A BF0AF5            CJNE    R7,#0AH,?C0085
002D         ?C0086:
                                           ; SOURCE LINE # 442
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 34  

002D 904000            MOV     DPTR,#U26
0030 E0                MOVX    A,@DPTR
0031 7BFF              MOV     R3,#0FFH
0033 30E70C            JNB     ACC.7,?C0087
                                           ; SOURCE LINE # 443
0036 7A00        R     MOV     R2,#HIGH ?SC_1453
0038 7900        R     MOV     R1,#LOW ?SC_1453
003A E0                MOVX    A,@DPTR
003B F500        E     MOV     ?_printf?BYTE+03H,A
003D 120000      E     LCALL   _printf
0040 8010              SJMP    ?C0088
0042         ?C0087:
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0042 7A00        R     MOV     R2,#HIGH ?SC_1488
0044 7900        R     MOV     R1,#LOW ?SC_1488
0046 904000            MOV     DPTR,#U26
0049 E0                MOVX    A,@DPTR
004A F500        E     MOV     ?_printf?BYTE+03H,A
004C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 446
004F 750001      R     MOV     err_cnt,#01H
                                           ; SOURCE LINE # 447
0052         ?C0088:
                                           ; SOURCE LINE # 449
0052 7BFF              MOV     R3,#0FFH
0054 7A00        R     MOV     R2,#HIGH ?SC_1531
0056 7900        R     MOV     R1,#LOW ?SC_1531
0058 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 450
005B 7BFF              MOV     R3,#0FFH
005D 7A00        R     MOV     R2,#HIGH ?SC_594
005F 7900        R     MOV     R1,#LOW ?SC_594
0061 120000      E     LCALL   _printf
0064         ?C0089:
0064 120000      E     LCALL   getchar
0067 900000      R     MOV     DPTR,#c
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
006C BF0AF5            CJNE    R7,#0AH,?C0089
006F         ?C0090:
                                           ; SOURCE LINE # 452
006F 904000            MOV     DPTR,#U26
0072 E0                MOVX    A,@DPTR
0073 7BFF              MOV     R3,#0FFH
0075 20E70C            JB      ACC.7,?C0091
                                           ; SOURCE LINE # 453
0078 7A00        R     MOV     R2,#HIGH ?SC_1453
007A 7900        R     MOV     R1,#LOW ?SC_1453
007C E0                MOVX    A,@DPTR
007D F500        E     MOV     ?_printf?BYTE+03H,A
007F 120000      E     LCALL   _printf
0082 8010              SJMP    ?C0092
0084         ?C0091:
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0084 7A00        R     MOV     R2,#HIGH ?SC_1488
0086 7900        R     MOV     R1,#LOW ?SC_1488
0088 904000            MOV     DPTR,#U26
008B E0                MOVX    A,@DPTR
008C F500        E     MOV     ?_printf?BYTE+03H,A
008E 120000      E     LCALL   _printf
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 35  

                                           ; SOURCE LINE # 456
0091 750002      R     MOV     err_cnt,#02H
                                           ; SOURCE LINE # 457
0094         ?C0092:
                                           ; SOURCE LINE # 459
0094 AF00        R     MOV     R7,err_cnt
                                           ; SOURCE LINE # 461
0096         ?C0093:
0096 22                RET     
             ; FUNCTION test_SW1 (END)

             ; FUNCTION test_U38 (BEGIN)
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 466
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_1558
0004 7900        R     MOV     R1,#LOW ?SC_1558
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 467
0009 E4                CLR     A
000A F500        R     MOV     err_cnt,A
                                           ; SOURCE LINE # 469
000C 90C000            MOV     DPTR,#buff_U38
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH ?SC_1570
0014 7900        R     MOV     R1,#LOW ?SC_1570
0016 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 472
0019 902001            MOV     DPTR,#U29+01H
001C E0                MOVX    A,@DPTR
001D 7BFF              MOV     R3,#0FFH
001F B4FF0C            CJNE    A,#0FFH,?C0094
                                           ; SOURCE LINE # 473
0022 7A00        R     MOV     R2,#HIGH ?SC_1619
0024 7900        R     MOV     R1,#LOW ?SC_1619
0026 E0                MOVX    A,@DPTR
0027 F500        E     MOV     ?_printf?BYTE+03H,A
0029 120000      E     LCALL   _printf
002C 800F              SJMP    ?C0095
002E         ?C0094:
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
002E 7A00        R     MOV     R2,#HIGH ?SC_1653
0030 7900        R     MOV     R1,#LOW ?SC_1653
0032 902001            MOV     DPTR,#U29+01H
0035 E0                MOVX    A,@DPTR
0036 F500        E     MOV     ?_printf?BYTE+03H,A
0038 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 476
003B 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 477
003D         ?C0095:
                                           ; SOURCE LINE # 478
003D 7BFF              MOV     R3,#0FFH
003F 7A00        R     MOV     R2,#HIGH ?SC_594
0041 7900        R     MOV     R1,#LOW ?SC_594
0043 120000      E     LCALL   _printf
0046         ?C0096:
0046 120000      E     LCALL   getchar
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 36  

0049 900000      R     MOV     DPTR,#c
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E BF0AF5            CJNE    R7,#0AH,?C0096
0051         ?C0097:
                                           ; SOURCE LINE # 480
0051 90C000            MOV     DPTR,#buff_U38
0054 74FF              MOV     A,#0FFH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0057 FB                MOV     R3,A
0058 7A00        R     MOV     R2,#HIGH ?SC_1695
005A 7900        R     MOV     R1,#LOW ?SC_1695
005C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 482
005F 902001            MOV     DPTR,#U29+01H
0062 E0                MOVX    A,@DPTR
0063 7BFF              MOV     R3,#0FFH
0065 700C              JNZ     ?C0098
                                           ; SOURCE LINE # 483
0067 7A00        R     MOV     R2,#HIGH ?SC_1619
0069 7900        R     MOV     R1,#LOW ?SC_1619
006B E0                MOVX    A,@DPTR
006C F500        E     MOV     ?_printf?BYTE+03H,A
006E 120000      E     LCALL   _printf
0071 800F              SJMP    ?C0099
0073         ?C0098:
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0073 7A00        R     MOV     R2,#HIGH ?SC_1653
0075 7900        R     MOV     R1,#LOW ?SC_1653
0077 902001            MOV     DPTR,#U29+01H
007A E0                MOVX    A,@DPTR
007B F500        E     MOV     ?_printf?BYTE+03H,A
007D 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 486
0080 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 487
0082         ?C0099:
                                           ; SOURCE LINE # 488
0082 7BFF              MOV     R3,#0FFH
0084 7A00        R     MOV     R2,#HIGH ?SC_594
0086 7900        R     MOV     R1,#LOW ?SC_594
0088 120000      E     LCALL   _printf
008B         ?C0100:
008B 120000      E     LCALL   getchar
008E 900000      R     MOV     DPTR,#c
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
0093 BF0AF5            CJNE    R7,#0AH,?C0100
0096         ?C0101:
                                           ; SOURCE LINE # 490
0096 900000      R     MOV     DPTR,#mask
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
009C E4                CLR     A
009D 900000      R     MOV     DPTR,#i
00A0 F0                MOVX    @DPTR,A
00A1         ?C0102:
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 37  

00A1 90C000            MOV     DPTR,#buff_U38
00A4 74FF              MOV     A,#0FFH
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
00A7 900000      R     MOV     DPTR,#mask
00AA E0                MOVX    A,@DPTR
00AB F4                CPL     A
00AC FF                MOV     R7,A
00AD 90C000            MOV     DPTR,#buff_U38
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
00B1 7BFF              MOV     R3,#0FFH
00B3 7A00        R     MOV     R2,#HIGH ?SC_1745
00B5 7900        R     MOV     R1,#LOW ?SC_1745
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB FE                MOV     R6,A
00BC C3                CLR     C
00BD 7413              MOV     A,#013H
00BF 9E                SUBB    A,R6
00C0 F500        E     MOV     ?_printf?BYTE+03H,A
00C2 8F00        E     MOV     ?_printf?BYTE+04H,R7
00C4 EE                MOV     A,R6
00C5 2402              ADD     A,#02H
00C7 F500        E     MOV     ?_printf?BYTE+05H,A
00C9 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 496
00CC 900000      R     MOV     DPTR,#mask
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 902001            MOV     DPTR,#U29+01H
00D4 E0                MOVX    A,@DPTR
00D5 7BFF              MOV     R3,#0FFH
00D7 B5070C            CJNE    A,AR7,?C0105
                                           ; SOURCE LINE # 497
00DA 7A00        R     MOV     R2,#HIGH ?SC_1619
00DC 7900        R     MOV     R1,#LOW ?SC_1619
00DE E0                MOVX    A,@DPTR
00DF F500        E     MOV     ?_printf?BYTE+03H,A
00E1 120000      E     LCALL   _printf
00E4 800F              SJMP    ?C0106
00E6         ?C0105:
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
00E6 7A00        R     MOV     R2,#HIGH ?SC_1653
00E8 7900        R     MOV     R1,#LOW ?SC_1653
00EA 902001            MOV     DPTR,#U29+01H
00ED E0                MOVX    A,@DPTR
00EE F500        E     MOV     ?_printf?BYTE+03H,A
00F0 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 500
00F3 0500        R     INC     err_cnt
                                           ; SOURCE LINE # 501
00F5         ?C0106:
                                           ; SOURCE LINE # 502
00F5 900000      R     MOV     DPTR,#mask
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA 25E0              ADD     A,ACC
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
00FD 7BFF              MOV     R3,#0FFH
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 38  

00FF 7A00        R     MOV     R2,#HIGH ?SC_594
0101 7900        R     MOV     R1,#LOW ?SC_594
0103 120000      E     LCALL   _printf
0106         ?C0107:
0106 120000      E     LCALL   getchar
0109 900000      R     MOV     DPTR,#c
010C EF                MOV     A,R7
010D F0                MOVX    @DPTR,A
010E BF0AF5            CJNE    R7,#0AH,?C0107
                                           ; SOURCE LINE # 504
0111         ?C0104:
0111 900000      R     MOV     DPTR,#i
0114 E0                MOVX    A,@DPTR
0115 04                INC     A
0116 F0                MOVX    @DPTR,A
0117 E0                MOVX    A,@DPTR
0118 C3                CLR     C
0119 9408              SUBB    A,#08H
011B 4084              JC      ?C0102
011D         ?C0103:
                                           ; SOURCE LINE # 505
011D E500        R     MOV     A,err_cnt
011F 6003              JZ      ?C0109
0121 7F01              MOV     R7,#01H
0123 22                RET     
0124         ?C0109:
                                           ; SOURCE LINE # 506
0124 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 508
0126         ?C0110:
0126 22                RET     
             ; FUNCTION test_U38 (END)

             ; FUNCTION test_U15 (BEGIN)
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 515
0000 E4                CLR     A
0001 F500        R     MOV     err_cnt,A
                                           ; SOURCE LINE # 517
0003 7BFF              MOV     R3,#0FFH
0005 7A00        R     MOV     R2,#HIGH ?SC_1813
0007 7900        R     MOV     R1,#LOW ?SC_1813
0009 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 518
000C D293              SETB    P1_3
                                           ; SOURCE LINE # 519
000E C294              CLR     P1_4
                                           ; SOURCE LINE # 520
0010 C295              CLR     P1_5
                                           ; SOURCE LINE # 521
0012 C296              CLR     P1_6
                                           ; SOURCE LINE # 522
0014 D297              SETB    PIO_RESET
                                           ; SOURCE LINE # 523
0016 7BFF              MOV     R3,#0FFH
0018 7A00        R     MOV     R2,#HIGH ?SC_1835
001A 7900        R     MOV     R1,#LOW ?SC_1835
001C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 524
001F 120000      R     LCALL   ins_stato_led
0022 EF                MOV     A,R7
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 39  

0023 6002              JZ      ?C0111
0025 0500        R     INC     err_cnt
0027         ?C0111:
                                           ; SOURCE LINE # 527
0027 C293              CLR     P1_3
                                           ; SOURCE LINE # 528
0029 D294              SETB    P1_4
                                           ; SOURCE LINE # 529
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_1866
002F 7900        R     MOV     R1,#LOW ?SC_1866
0031 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 530
0034 120000      R     LCALL   ins_stato_led
0037 EF                MOV     A,R7
0038 6002              JZ      ?C0112
003A 0500        R     INC     err_cnt
003C         ?C0112:
                                           ; SOURCE LINE # 533
003C C294              CLR     P1_4
                                           ; SOURCE LINE # 534
003E D295              SETB    P1_5
                                           ; SOURCE LINE # 535
0040 7BFF              MOV     R3,#0FFH
0042 7A00        R     MOV     R2,#HIGH ?SC_1897
0044 7900        R     MOV     R1,#LOW ?SC_1897
0046 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 536
0049 120000      R     LCALL   ins_stato_led
004C EF                MOV     A,R7
004D 6002              JZ      ?C0113
004F 0500        R     INC     err_cnt
0051         ?C0113:
                                           ; SOURCE LINE # 539
0051 C295              CLR     P1_5
                                           ; SOURCE LINE # 540
0053 D296              SETB    P1_6
                                           ; SOURCE LINE # 541
0055 7BFF              MOV     R3,#0FFH
0057 7A00        R     MOV     R2,#HIGH ?SC_1928
0059 7900        R     MOV     R1,#LOW ?SC_1928
005B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 542
005E 120000      R     LCALL   ins_stato_led
0061 EF                MOV     A,R7
0062 6002              JZ      ?C0114
0064 0500        R     INC     err_cnt
0066         ?C0114:
                                           ; SOURCE LINE # 545
0066 C296              CLR     P1_6
                                           ; SOURCE LINE # 547
0068 90E000            MOV     DPTR,#buff_U37
006B 7401              MOV     A,#01H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
006E 7BFF              MOV     R3,#0FFH
0070 7A00        R     MOV     R2,#HIGH ?SC_1959
0072 7900        R     MOV     R1,#LOW ?SC_1959
0074 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 549
0077 120000      R     LCALL   ins_stato_led
007A EF                MOV     A,R7
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 40  

007B 6002              JZ      ?C0115
007D 0500        R     INC     err_cnt
007F         ?C0115:
                                           ; SOURCE LINE # 551
007F E4                CLR     A
0080 90E000            MOV     DPTR,#buff_U37
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0084 D297              SETB    PIO_RESET
                                           ; SOURCE LINE # 554
0086 7BFF              MOV     R3,#0FFH
0088 7A00        R     MOV     R2,#HIGH ?SC_1990
008A 7900        R     MOV     R1,#LOW ?SC_1990
008C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 555
008F C297              CLR     PIO_RESET
                                           ; SOURCE LINE # 556
0091 120000      R     LCALL   ins_stato_led
0094 EF                MOV     A,R7
0095 6002              JZ      ?C0116
0097 0500        R     INC     err_cnt
0099         ?C0116:
                                           ; SOURCE LINE # 558
0099 E500        R     MOV     A,err_cnt
009B 6003              JZ      ?C0117
009D 7F01              MOV     R7,#01H
009F 22                RET     
00A0         ?C0117:
                                           ; SOURCE LINE # 559
00A0 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 560
00A2         ?C0118:
00A2 22                RET     
             ; FUNCTION test_U15 (END)

             ; FUNCTION test_led_OFF (BEGIN)
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#esito_test_led_off
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0005 90C000            MOV     DPTR,#buff_U38
0008 74FF              MOV     A,#0FFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
000B E4                CLR     A
000C F500        E     MOV     del,A
000E         ?C0119:
000E 0500        E     INC     del
0010 E500        E     MOV     A,del
0012 B4C8F9            CJNE    A,#0C8H,?C0119
0015         ?C0120:
                                           ; SOURCE LINE # 570
0015 E4                CLR     A
0016 90E000            MOV     DPTR,#buff_U37
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
001A C293              CLR     P1_3
                                           ; SOURCE LINE # 573
001C C294              CLR     P1_4
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 41  

                                           ; SOURCE LINE # 574
001E C295              CLR     P1_5
                                           ; SOURCE LINE # 575
0020 C296              CLR     P1_6
                                           ; SOURCE LINE # 576
0022 C297              CLR     PIO_RESET
                                           ; SOURCE LINE # 579
0024 904001            MOV     DPTR,#U26+01H
0027 74FF              MOV     A,#0FFH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
002A E4                CLR     A
002B A3                INC     DPTR
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
002D 902000            MOV     DPTR,#U29
0030 74FE              MOV     A,#0FEH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0033 7BFF              MOV     R3,#0FFH
0035 7A00        R     MOV     R2,#HIGH ?SC_116
0037 7900        R     MOV     R1,#LOW ?SC_116
0039 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 589
003C 7BFF              MOV     R3,#0FFH
003E 7A00        R     MOV     R2,#HIGH ?SC_2021
0040 7900        R     MOV     R1,#LOW ?SC_2021
0042 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 590
0045 120000      R     LCALL   ins_stato_led
                                           ; SOURCE LINE # 593
0048         ?C0122:
0048 22                RET     
             ; FUNCTION test_led_OFF (END)

             ; FUNCTION test_led_ON (BEGIN)
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#esito_test_led_on
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
0005 90C000            MOV     DPTR,#buff_U38
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0009 90E000            MOV     DPTR,#buff_U37
000C 04                INC     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
000E D293              SETB    P1_3
                                           ; SOURCE LINE # 604
0010 D294              SETB    P1_4
                                           ; SOURCE LINE # 605
0012 D295              SETB    P1_5
                                           ; SOURCE LINE # 606
0014 D296              SETB    P1_6
                                           ; SOURCE LINE # 607
0016 C297              CLR     PIO_RESET
                                           ; SOURCE LINE # 610
0018 E4                CLR     A
0019 904001            MOV     DPTR,#U26+01H
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 42  

001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
001D A3                INC     DPTR
001E 74FF              MOV     A,#0FFH
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
0021 E4                CLR     A
0022 902000            MOV     DPTR,#U29
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0026 7BFF              MOV     R3,#0FFH
0028 7A00        R     MOV     R2,#HIGH ?SC_116
002A 7900        R     MOV     R1,#LOW ?SC_116
002C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 620
002F 7BFF              MOV     R3,#0FFH
0031 7A00        R     MOV     R2,#HIGH ?SC_2082
0033 7900        R     MOV     R1,#LOW ?SC_2082
0035 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 621
0038 120000      R     LCALL   ins_stato_led
                                           ; SOURCE LINE # 622
003B         ?C0123:
003B 22                RET     
             ; FUNCTION test_led_ON (END)

             ; FUNCTION ins_stato_led (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
0000         ?C0126:
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_2123
0004 7900        R     MOV     R1,#LOW ?SC_2123
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 646
0009 120000      E     LCALL   getchar
000C 120000      E     LCALL   _toupper
;---- Variable 'e' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
000F EF                MOV     A,R7
0010 6431              XRL     A,#031H
0012 6003              JZ      ?C0125
0014 BF30E9            CJNE    R7,#030H,?C0126
0017         ?C0125:
                                           ; SOURCE LINE # 650
0017 BF3003            CJNE    R7,#030H,?C0128
001A 7F01              MOV     R7,#01H
001C 22                RET     
001D         ?C0128:
                                           ; SOURCE LINE # 651
001D 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 653
001F         ?C0129:
001F 22                RET     
             ; FUNCTION ins_stato_led (END)

             ; FUNCTION test_pio (BEGIN)
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 43  

                                           ; SOURCE LINE # 656
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_2138
0004 7900        R     MOV     R1,#LOW ?SC_2138
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 657
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#error
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
000E 7BFF              MOV     R3,#0FFH
0010 7A00        R     MOV     R2,#HIGH ?SC_116
0012 7900        R     MOV     R1,#LOW ?SC_116
0014 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 660
0017 120000      R     LCALL   pio_reset
                                           ; SOURCE LINE # 661
001A 120000      R     LCALL   pio_conf
                                           ; SOURCE LINE # 663
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#esito_test_led_on
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
0022 900000      R     MOV     DPTR,#esito_test_led_off
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
0026 900000      R     MOV     DPTR,#esito_test_u26_pc
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 666
002A 900000      R     MOV     DPTR,#esito_test_u26_pb
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
002E 900000      R     MOV     DPTR,#esito_test_u29_pa
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0032 900000      R     MOV     DPTR,#esito_test_u38
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
0036 900000      R     MOV     DPTR,#esito_test_u15
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
003A 120000      R     LCALL   test_led_ON
003D 900000      R     MOV     DPTR,#esito_test_led_on
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
0042 120000      R     LCALL   test_led_OFF
0045 900000      R     MOV     DPTR,#esito_test_led_off
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
004A 120000      R     LCALL   test_U26_PC
004D 900000      R     MOV     DPTR,#esito_test_u26_pc
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
0052 120000      R     LCALL   test_U26_PB
0055 900000      R     MOV     DPTR,#esito_test_u26_pb
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 676
005A 120000      R     LCALL   test_U29_PA
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 44  

005D 900000      R     MOV     DPTR,#esito_test_u29_pa
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
0062 120000      R     LCALL   test_U38
0065 900000      R     MOV     DPTR,#esito_test_u38
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
006A 120000      R     LCALL   test_U15
006D 900000      R     MOV     DPTR,#esito_test_u15
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
0072 7BFF              MOV     R3,#0FFH
0074 7A00        R     MOV     R2,#HIGH ?SC_116
0076 7900        R     MOV     R1,#LOW ?SC_116
0078 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 681
007B 900000      R     MOV     DPTR,#esito_test_led_on
007E E0                MOVX    A,@DPTR
007F 7028              JNZ     ?C0130
0081 900000      R     MOV     DPTR,#esito_test_led_off
0084 E0                MOVX    A,@DPTR
0085 7022              JNZ     ?C0130
0087 900000      R     MOV     DPTR,#esito_test_u26_pb
008A E0                MOVX    A,@DPTR
008B 701C              JNZ     ?C0130
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F 7018              JNZ     ?C0130
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 7014              JNZ     ?C0130
0095 900000      R     MOV     DPTR,#esito_test_u38
0098 E0                MOVX    A,@DPTR
0099 700E              JNZ     ?C0130
009B 900000      R     MOV     DPTR,#esito_test_u15
009E E0                MOVX    A,@DPTR
009F 7008              JNZ     ?C0130
                                           ; SOURCE LINE # 688
00A1 7BFF              MOV     R3,#0FFH
00A3 7A00        R     MOV     R2,#HIGH ?SC_2169
00A5 7900        R     MOV     R1,#LOW ?SC_2169
00A7 806F              SJMP    ?C0142
00A9         ?C0130:
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
00A9 7BFF              MOV     R3,#0FFH
00AB 7A00        R     MOV     R2,#HIGH ?SC_2183
00AD 7900        R     MOV     R1,#LOW ?SC_2183
00AF 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 692
00B2 900000      R     MOV     DPTR,#esito_test_led_on
00B5 E0                MOVX    A,@DPTR
00B6 6009              JZ      ?C0132
00B8 7BFF              MOV     R3,#0FFH
00BA 7A00        R     MOV     R2,#HIGH ?SC_2201
00BC 7900        R     MOV     R1,#LOW ?SC_2201
00BE 120000      E     LCALL   _printf
00C1         ?C0132:
                                           ; SOURCE LINE # 693
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 45  

00C1 900000      R     MOV     DPTR,#esito_test_led_off
00C4 E0                MOVX    A,@DPTR
00C5 6009              JZ      ?C0133
00C7 7BFF              MOV     R3,#0FFH
00C9 7A00        R     MOV     R2,#HIGH ?SC_2218
00CB 7900        R     MOV     R1,#LOW ?SC_2218
00CD 120000      E     LCALL   _printf
00D0         ?C0133:
                                           ; SOURCE LINE # 694
00D0 900000      R     MOV     DPTR,#esito_test_u26_pb
00D3 E0                MOVX    A,@DPTR
00D4 6009              JZ      ?C0134
00D6 7BFF              MOV     R3,#0FFH
00D8 7A00        R     MOV     R2,#HIGH ?SC_2235
00DA 7900        R     MOV     R1,#LOW ?SC_2235
00DC 120000      E     LCALL   _printf
00DF         ?C0134:
                                           ; SOURCE LINE # 695
00DF 900000      R     MOV     DPTR,#esito_test_u26_pc
00E2 E0                MOVX    A,@DPTR
00E3 6009              JZ      ?C0135
00E5 7BFF              MOV     R3,#0FFH
00E7 7A00        R     MOV     R2,#HIGH ?SC_2252
00E9 7900        R     MOV     R1,#LOW ?SC_2252
00EB 120000      E     LCALL   _printf
00EE         ?C0135:
                                           ; SOURCE LINE # 696
00EE 900000      R     MOV     DPTR,#esito_test_u29_pa
00F1 E0                MOVX    A,@DPTR
00F2 6009              JZ      ?C0136
00F4 7BFF              MOV     R3,#0FFH
00F6 7A00        R     MOV     R2,#HIGH ?SC_2269
00F8 7900        R     MOV     R1,#LOW ?SC_2269
00FA 120000      E     LCALL   _printf
00FD         ?C0136:
                                           ; SOURCE LINE # 697
00FD 900000      R     MOV     DPTR,#esito_test_u38
0100 E0                MOVX    A,@DPTR
0101 6009              JZ      ?C0137
0103 7BFF              MOV     R3,#0FFH
0105 7A00        R     MOV     R2,#HIGH ?SC_2286
0107 7900        R     MOV     R1,#LOW ?SC_2286
0109 120000      E     LCALL   _printf
010C         ?C0137:
                                           ; SOURCE LINE # 698
010C 900000      R     MOV     DPTR,#esito_test_u15
010F E0                MOVX    A,@DPTR
0110 6009              JZ      ?C0131
0112 7BFF              MOV     R3,#0FFH
0114 7A00        R     MOV     R2,#HIGH ?SC_2303
0116 7900        R     MOV     R1,#LOW ?SC_2303
0118         ?C0142:
0118 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 700
011B         ?C0131:
                                           ; SOURCE LINE # 701
011B 7BFF              MOV     R3,#0FFH
011D 7A00        R     MOV     R2,#HIGH ?SC_2320
011F 7900        R     MOV     R1,#LOW ?SC_2320
0121 120000      E     LCALL   _printf
0124         ?C0139:
                                           ; SOURCE LINE # 702
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 46  

0124 120000      E     LCALL   getchar
0127 900000      R     MOV     DPTR,#c
012A EF                MOV     A,R7
012B F0                MOVX    @DPTR,A
012C BF0AF5            CJNE    R7,#0AH,?C0139
                                           ; SOURCE LINE # 909
012F         ?C0141:
012F 22                RET     
             ; FUNCTION test_pio (END)

C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 47  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


test_SW1 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  err_cnt. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0002H  1
esito_test_led_off . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
scelta . . . . . . . . . . . . . . . .  PUBLIC   DATA   CHAR     0005H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
test_pio_menu. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  exit_menu. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
esito_test_u15 . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
esito_test_u38 . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
start_ritardo. . . . . . . . . . . . .  STATIC   XDATA  U_INT    0003H  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P1_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
_toupper . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
test_led_OFF . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
P1_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P1_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
error_PA . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0005H  1
esito_test_led_on. . . . . . . . . . .  STATIC   XDATA  U_CHAR   0006H  1
error. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0007H  1
mask . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0008H  1
del. . . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
cont . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0009H  1
exit . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000AH  1
esito_test_u26_pb. . . . . . . . . . .  STATIC   XDATA  U_CHAR   000BH  1
esito_test_u26_pc. . . . . . . . . . .  STATIC   XDATA  U_CHAR   000CH  1
U26. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    4000H  4
esito_test_u29_pa. . . . . . . . . . .  STATIC   XDATA  U_CHAR   000DH  1
U29. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    2000H  4
buff_U37 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E000H  1
buff_U38 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C000H  1
esito_test_sw1 . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000EH  1
error_U38. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000FH  1
PIO_RESET. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
pio_reset. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
pio_conf . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
test_U26_PB. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  err_cnt. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0000H  1
test_U26_PC. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
test_U29_PA. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  err_cnt. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0001H  1
test_led_ON. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
test_U15 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  err_cnt. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0004H  1
mask2. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0010H  1
c. . . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0011H  1
getchar. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
test_U38 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  err_cnt. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0003H  1
i. . . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0012H  1
test_pio . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_getkey. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ins_stato_led. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  e. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
C51 COMPILER V8.05a   PIO                                                                  03/11/2010 12:19:51 PAGE 48  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


esito_test_pio . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0013H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2589    ----
   CONSTANT SIZE    =   2354    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
