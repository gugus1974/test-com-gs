C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE UTIL
OBJECT MODULE PLACED IN .\obj\Util.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\Util.C OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\ls
                    -t\Util.lst) PREPRINT(.\lst\Util.i) OBJECT(.\obj\Util.obj)

line level    source

   1          /****************************************************************/
   2          /* 27.feb.2001       v.2.02      \SWISV\EMUC\A\CCU\SRC\Util.c   */
   3          /****************************************************************/
   4          /* Funzioni di uso comune su CCU Emu Norvegia                   */
   5          /****************************************************************/
   6          /*
   7              $Date: 2007/09/17 13:05:53 $                               $Revision: 1.5 $
   8              $Author: schiavor $
   9          */
  10          
  11          #include "stdio.h"
  12          #include "string.h"     /* gestione stringhe */
  13          
  14          #include "util.h"
  15          
  16          
  17          
  18          /*********************************/
  19          /* Define di Modulo              */
  20          /*********************************/
  21          
  22          
  23          /******************************/
  24          /* variabili Globali di Modulo*/
  25          /******************************/
  26          /*********************************/
  27          /* Extern Variabili              */
  28          /*********************************/
  29          
  30          
  31          /*********************************/
  32          /* Prototipi Funzioni di Modulo  */
  33          /*********************************/
  34          
  35          //static short gest_sim_temp(short argc, char* argv[]);
  36          
  37          /*******************************************************/
  38          /*    Comando e Controllo                              */
  39          /*******************************************************/
  40          /*******************************************************/
  41          /*    Test a tempo Condizione vera per time            */
  42          /*******************************************************/
  43          
  44          
  45          
  46          
  47          
  48          
  49          
  50          
  51          /**************************************************************************/
  52          /*                                                                        */
  53          /* -> get_char_bit(x,y)   : estrae il bit in pos. "y" di char "x"         */
  54          /* -> get_int_bit(x,y)    : estrae il bit in pos. "y" di int "x"          */
C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 2   

  55          /* -> get_long_bit(x,y)   : estrae il bit in pos. "y" di long "x"         */
  56          /*                                                                        */
  57          /* -> set_char_bit(x,y,z) : imposta a "z" il bit in pos. "y" di char "x"  */
  58          /* -> set_int_bit(x,y,z)  : imposta a "z" il bit in pos. "y" di int "x"   */
  59          /* -> set_long_bit(x,y,z) : imposta a "z" il bit in pos. "y" di long "x"  */
  60          /*                                                                        */
  61          /* -> print_char_bin(x)   : stampa a video in binario char "x"            */
  62          /* -> print_int_bin(x)    : stampa a video in binario int "x"             */
  63          /* -> print_long_bin(x)   : stampa a video in binario long "x"            */
  64          /*                                                                        */
  65          /* -> char_to_int(x1,x2)  : trasforma in int i due char "x1" e "x2"       */
  66          /* -> int_to_char(x,y)    : estrae il char in posizione "y" da int "x"    */
  67          /*                                                                        */
  68          /* -> diff_mod_char(x,y)  : genera differenza in modulo tra "x" e "y"     */
  69          /* -> diff_mod_int(x,y)   : genera differenza in modulo tra "x" e "y"     */
  70          /*                                                                        */
  71          /**************************************************************************/
  72          
  73          
  74          
  75          unsigned char get_char_bit(unsigned char *variabile, char posizione)
  76          {
  77   1          int tmp;
  78   1      
  79   1          if (posizione<8) tmp=(*variabile>>posizione) & 0x01;
  80   1          else tmp=9;
  81   1      
  82   1          return (tmp);
  83   1      }
  84          
  85          /*
  86          unsigned char get_int_bit(unsigned int *variabile, char posizione)
  87          {
  88              int tmp;
  89          
  90              if (posizione<16) tmp=(*variabile>>posizione) & 0x01;
  91              else tmp=9;
  92          
  93              return (tmp);
  94          }
  95          
  96          
  97          unsigned char get_long_bit(unsigned long *variabile, char posizione)
  98          {
  99              int tmp;
 100          
 101              if (posizione<32) tmp=(*variabile>>posizione) & 0x01;
 102              else tmp=9;
 103          
 104              return (tmp);
 105          }
 106          
 107          
 108          
 109          unsigned char set_char_bit(unsigned char *variabile, unsigned char posizione, unsigned char valore)
 110          {
 111              char tmp=0;
 112          
 113              if ((posizione<8)&&(valore<2))
 114                *variabile=(valore<<posizione) | (*variabile & ~(0x01<<posizione));
 115              else
 116                tmp=9;
C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 3   

 117          
 118              return (tmp);
 119          }
 120          
 121          
 122          
 123          unsigned char set_int_bit(unsigned int *variabile, unsigned char posizione, unsigned char valore)
 124          {
 125              char tmp=0;
 126          
 127              if ((posizione<16)&&(valore<2))
 128                *variabile=(valore<<posizione) | (*variabile & ~(0x01<<posizione));
 129              else
 130                tmp=9;
 131          
 132              return (tmp);
 133          }
 134          
 135          
 136          unsigned char set_long_bit(unsigned long *variabile, unsigned char posizione, unsigned char valore)
 137          {
 138              char tmp=0;
 139          
 140              if ((posizione<16)&&(valore<2))
 141                *variabile=(valore<<posizione) | (*variabile & ~(0x01<<posizione));
 142              else
 143                tmp=9;
 144          
 145              return (tmp);
 146          }
 147          */
 148          void print_char_bin(unsigned char valore)
 149          {
 150   1          char i;
 151   1      
 152   1          for (i=7; i>=0; i--)
 153   1          {
 154   2            if (i==3) printf(" ");
 155   2            printf("%01bd",get_char_bit(&valore,i));
 156   2          }
 157   1      }
 158          
 159          /*
 160          void print_int_bin(unsigned int valore)
 161          {
 162              char i;
 163          
 164              for (i=15; i>=0; i--)
 165              {
 166                if ((i==3)||(i==7)||(i==11)) printf(" ");
 167                printf("%d",get_int_bit(&valore,i));
 168              }
 169          }
 170          
 171          
 172          void print_long_bin(unsigned long valore)
 173          {
 174              char i;
 175          
 176              for (i=31; i>=0; i--)
 177              {
 178                if ((i==3)||(i==7)||(i==11)||(i==15)||(i==19)||(i==23)||(i==27)) printf(" ");
C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 4   

 179                printf("%d",get_long_bit(&valore,i));
 180              }
 181          }
 182          */
C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _get_char_bit (BEGIN)
                                           ; SOURCE LINE # 75
;---- Variable 'posizione' assigned to Register 'R5' ----
;---- Variable 'variabile' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 79
0000 C3                CLR     C
0001 ED                MOV     A,R5
0002 6480              XRL     A,#080H
0004 9488              SUBB    A,#088H
0006 5018              JNC     ?C0001
0008 120000      E     LCALL   ?C?CLDPTR
000B FF                MOV     R7,A
000C AE05              MOV     R6,AR5
000E A806              MOV     R0,AR6
0010 08                INC     R0
0011 8002              SJMP    ?C0010
0013         ?C0009:
0013 C3                CLR     C
0014 13                RRC     A
0015         ?C0010:
0015 D8FC              DJNZ    R0,?C0009
0017 750000      R     MOV     tmp,#00H
001A 5401              ANL     A,#01H
001C F500        R     MOV     tmp+01H,A
001E 8006              SJMP    ?C0002
0020         ?C0001:
                                           ; SOURCE LINE # 80
0020 750000      R     MOV     tmp,#00H
0023 750009      R     MOV     tmp+01H,#09H
0026         ?C0002:
                                           ; SOURCE LINE # 82
0026 AF00        R     MOV     R7,tmp+01H
                                           ; SOURCE LINE # 83
0028         ?C0003:
0028 22                RET     
             ; FUNCTION _get_char_bit (END)

             ; FUNCTION _print_char_bin (BEGIN)
                                           ; SOURCE LINE # 148
0000 8F00        R     MOV     valore,R7
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 152
0002 750007      R     MOV     i,#07H
0005         ?C0004:
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0005 E500        R     MOV     A,i
0007 B40309            CJNE    A,#03H,?C0007
000A 7BFF              MOV     R3,#0FFH
000C 7A00        R     MOV     R2,#HIGH ?SC_0
000E 7900        R     MOV     R1,#LOW ?SC_0
0010 120000      E     LCALL   _printf
0013         ?C0007:
                                           ; SOURCE LINE # 155
0013 7B00              MOV     R3,#00H
0015 7A00        R     MOV     R2,#HIGH valore
0017 7900        R     MOV     R1,#LOW valore
0019 AD00        R     MOV     R5,i
C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 6   

001B 120000      R     LCALL   _get_char_bit
001E 8F00        E     MOV     ?_printf?BYTE+03H,R7
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_2
0024 7900        R     MOV     R1,#LOW ?SC_2
0026 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 156
0029 1500        R     DEC     i
002B C3                CLR     C
002C E500        R     MOV     A,i
002E 6480              XRL     A,#080H
0030 9480              SUBB    A,#080H
0032 50D1              JNC     ?C0004
                                           ; SOURCE LINE # 157
0034         ?C0008:
0034 22                RET     
             ; FUNCTION _print_char_bin (END)

C51 COMPILER V8.05a   UTIL                                                                 01/22/2010 02:05:51 PAGE 7   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uchar. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ushort . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
UINT . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_print_char_bin. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  valore . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   CHAR     0001H  1
_get_char_bit. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  variabile. . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  posizione. . . . . . . . . . . . . .  * REG *  DATA   CHAR     0005H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     94    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
