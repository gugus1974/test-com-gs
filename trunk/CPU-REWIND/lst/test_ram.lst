C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE TEST_RAM
OBJECT MODULE PLACED IN .\exe\test_ram.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\test_ram.c OPTIMIZE(SIZE) CODE SYMBOLS PRINT(.\lst\test_ram.lst) PREPRI
                    -NT(.\lst\test_ram.i) OBJECT(.\exe\test_ram.obj)

line level    source

   1          /***************************************************************************/
   2          /* Test RAM
   3          Questa procedura è chiamata direttamente da STARTDEV.A66 dentro di RAM2ROM2.INC
   4          /***************************************************************************/
   5          #include <reg51.h>
   6          #include <stdio.h>
   7          #include "test_ram.h"
   8          #include "util.h"
   9          /*********************************/
  10          /* Definizione Variabili Globali */
  11          /*********************************/
  12          //volatile unsigned short xdata * ADDR _at_ RAM_START;  /* generic pointer */
  13          unsigned short xdata * ADDR ;  /* generic pointer */
  14          
  15          /*********************************/
  16          /* Extern Variabili              */
  17          /*********************************/
  18          /*********************************/
  19          /* Prototipi Funzioni di Modulo  */
  20          /*********************************/
  21          void test_ram(void);
  22          
  23          /*********************************/
  24          /*Definizione Variabili di Modulo*/
  25          /*********************************/
  26          static unsigned char i=0,j =0;
  27          static unsigned char err =0;
  28          
  29          
  30          /**************************/
  31          /* Funzioni di Modulo     */
  32          /**************************/
  33          
  34          void test_ram(void)
  35          {
  36   1              unsigned short adr;
  37   1              unsigned short appo;
  38   1              char c;
  39   1      
  40   1      
  41   1              printf("\nTest RAM ESTERNA (0x0000 .. 0x1FFF)\n\n");
  42   1              printf("Write pattern 0xAA55  \n");
  43   1          err=0;
  44   1              for( ADDR=RAM_START; ADDR<RAM_END; ADDR++)
  45   1              {
  46   2                      adr = (unsigned short)ADDR ;
  47   2                      printf("@%04X \r",adr );
  48   2      
  49   2                      *ADDR=0xAA55;
  50   2              }
  51   1              
  52   1              printf("\nVerify at \n");
  53   1              for( ADDR=RAM_START; ADDR<RAM_END; ADDR++)
  54   1              {
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 2   

  55   2                      adr = (unsigned short)ADDR ;
  56   2                      printf("%04X \r",adr );
  57   2      
  58   2                  if(*ADDR!=0xAA55) 
  59   2                              {
  60   3                                      printf("test RAM KO %04X @ read %04x\n",ADDR,*ADDR);
  61   3                                      err=1;
  62   3                                      break;   //set P1.7
  63   3                              }
  64   2              }
  65   1      
  66   1      
  67   1              /* scrittura pattern AA*/
  68   1              printf("\nWrite pattern 0x55AA at \n");
  69   1              for( ADDR=RAM_START; ADDR<RAM_END; ADDR++)
  70   1              {
  71   2                      adr = (unsigned short)ADDR ;
  72   2                      printf("%04X \r",adr );
  73   2      
  74   2                      *ADDR=0x55AA;
  75   2              }
  76   1      
  77   1              /* lettura pattern AA */
  78   1              printf("\nVerify at \n");
  79   1              for( ADDR=RAM_START; ADDR<RAM_END; ADDR++)
  80   1              {
  81   2                      adr = (unsigned short)ADDR ;
  82   2                      printf("%04X \r",adr );
  83   2      
  84   2                  if(*ADDR!=0x55AA) 
  85   2                              {
  86   3                                      printf("test RAM KO %lX @ read %04x\n",ADDR,*ADDR);
  87   3                                      err=2;
  88   3                                      break;   //set P1.7
  89   3                              }
  90   2              }
  91   1              
  92   1              printf("\nTest 1-shifting on A0..A12 \n");
  93   1              
  94   1              ADDR = 0x0000;
  95   1              *ADDR = 0xAA55;
  96   1              printf("%04X (0x0000) ",(unsigned short)ADDR );
  97   1              if (*ADDR == 0xAA55)
  98   1                      printf(" ..ok\n");
  99   1              else    
 100   1                      printf("..KO %lx\n",*ADDR), err=3;
 101   1      
 102   1              for(i=0; i<255; i++);
 103   1      
 104   1              j=0;
 105   1              ADDR= 0x0001;
 106   1              appo = 0x0001;
 107   1              while (appo<0x2000) 
 108   1              {
 109   2                      adr = (unsigned short)ADDR ;
 110   2                      printf("%04X  (A%bd) ",((unsigned short)ADDR),j++ );
 111   2      
 112   2                      *ADDR = 0xAA55;
 113   2                      
 114   2                      for(i=0; i<255; i++);
 115   2                      
 116   2                      if (*ADDR == 0xAA55)
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 3   

 117   2                              printf(" ..ok\n");
 118   2                      else    
 119   2                              printf("..KO %u\n",*ADDR), err=3;
 120   2                      
 121   2                      appo <<= 1;
 122   2                      ADDR = (unsigned short xdata *)appo;
 123   2              }
 124   1      
 125   1              if(!err)
 126   1                      printf("Test RAM OK\n");
 127   1              else 
 128   1                      printf("Test RAM KO error  %bd\n",err);
 129   1      
 130   1              printf("Premere INVIO per proseguire.\r\n");
 131   1          while ( (c = getchar()) !=0x0a) ;
 132   1      }
 133          
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION test_ram (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 41
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 42
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_39
000D 7900        R     MOV     R1,#LOW ?SC_39
000F 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 43
0012 E4                CLR     A
0013 F500        R     MOV     err,A
                                           ; SOURCE LINE # 44
0015 F500        R     MOV     ADDR,A
0017 F500        R     MOV     ADDR+01H,A
0019         ?C0001:
0019 AE00        R     MOV     R6,ADDR
001B AF00        R     MOV     R7,ADDR+01H
001D C3                CLR     C
001E EF                MOV     A,R7
001F 94FF              SUBB    A,#0FFH
0021 EE                MOV     A,R6
0022 941F              SUBB    A,#01FH
0024 502D              JNC     ?C0002
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0026 8E00        R     MOV     adr,R6
0028 8F00        R     MOV     adr+01H,R7
                                           ; SOURCE LINE # 47
002A 7BFF              MOV     R3,#0FFH
002C 7A00        R     MOV     R2,#HIGH ?SC_63
002E 7900        R     MOV     R1,#LOW ?SC_63
0030 850000      E     MOV     ?_printf?BYTE+03H,adr
0033 850000      E     MOV     ?_printf?BYTE+04H,adr+01H
0036 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 49
0039 850082      R     MOV     DPL,ADDR+01H
003C 850083      R     MOV     DPH,ADDR
003F 74AA              MOV     A,#0AAH
0041 F0                MOVX    @DPTR,A
0042 A3                INC     DPTR
0043 7455              MOV     A,#055H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0046 7402              MOV     A,#02H
0048 2500        R     ADD     A,ADDR+01H
004A F500        R     MOV     ADDR+01H,A
004C E4                CLR     A
004D 3500        R     ADDC    A,ADDR
004F F500        R     MOV     ADDR,A
0051 80C6              SJMP    ?C0001
0053         ?C0002:
                                           ; SOURCE LINE # 52
0053 7BFF              MOV     R3,#0FFH
0055 7A00        R     MOV     R2,#HIGH ?SC_71
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 5   

0057 7900        R     MOV     R1,#LOW ?SC_71
0059 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 53
005C E4                CLR     A
005D F500        R     MOV     ADDR,A
005F F500        R     MOV     ADDR+01H,A
0061         ?C0004:
0061 AE00        R     MOV     R6,ADDR
0063 AF00        R     MOV     R7,ADDR+01H
0065 C3                CLR     C
0066 EF                MOV     A,R7
0067 94FF              SUBB    A,#0FFH
0069 EE                MOV     A,R6
006A 941F              SUBB    A,#01FH
006C 504F              JNC     ?C0005
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
006E 8E00        R     MOV     adr,R6
0070 8F00        R     MOV     adr+01H,R7
                                           ; SOURCE LINE # 56
0072 7BFF              MOV     R3,#0FFH
0074 7A00        R     MOV     R2,#HIGH ?SC_84
0076 7900        R     MOV     R1,#LOW ?SC_84
0078 850000      E     MOV     ?_printf?BYTE+03H,adr
007B 850000      E     MOV     ?_printf?BYTE+04H,adr+01H
007E 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 58
0081 850082      R     MOV     DPL,ADDR+01H
0084 850083      R     MOV     DPH,ADDR
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C 6455              XRL     A,#055H
008E 7003              JNZ     ?C0032
0090 EE                MOV     A,R6
0091 64AA              XRL     A,#0AAH
0093         ?C0032:
0093 601B              JZ      ?C0006
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0095 750001      E     MOV     ?_printf?BYTE+03H,#01H
0098 850000      E     MOV     ?_printf?BYTE+04H,ADDR
009B 850000      E     MOV     ?_printf?BYTE+05H,ADDR+01H
009E 8E00        E     MOV     ?_printf?BYTE+06H,R6
00A0 8F00        E     MOV     ?_printf?BYTE+07H,R7
00A2 7BFF              MOV     R3,#0FFH
00A4 7A00        R     MOV     R2,#HIGH ?SC_91
00A6 7900        R     MOV     R1,#LOW ?SC_91
00A8 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 61
00AB 750001      R     MOV     err,#01H
                                           ; SOURCE LINE # 62
00AE 800D              SJMP    ?C0005
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
00B0         ?C0006:
00B0 7402              MOV     A,#02H
00B2 2500        R     ADD     A,ADDR+01H
00B4 F500        R     MOV     ADDR+01H,A
00B6 E4                CLR     A
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 6   

00B7 3500        R     ADDC    A,ADDR
00B9 F500        R     MOV     ADDR,A
00BB 80A4              SJMP    ?C0004
00BD         ?C0005:
                                           ; SOURCE LINE # 68
00BD 7BFF              MOV     R3,#0FFH
00BF 7A00        R     MOV     R2,#HIGH ?SC_121
00C1 7900        R     MOV     R1,#LOW ?SC_121
00C3 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 69
00C6 E4                CLR     A
00C7 F500        R     MOV     ADDR,A
00C9 F500        R     MOV     ADDR+01H,A
00CB         ?C0008:
00CB AE00        R     MOV     R6,ADDR
00CD AF00        R     MOV     R7,ADDR+01H
00CF C3                CLR     C
00D0 EF                MOV     A,R7
00D1 94FF              SUBB    A,#0FFH
00D3 EE                MOV     A,R6
00D4 941F              SUBB    A,#01FH
00D6 502D              JNC     ?C0009
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
00D8 8E00        R     MOV     adr,R6
00DA 8F00        R     MOV     adr+01H,R7
                                           ; SOURCE LINE # 72
00DC 7BFF              MOV     R3,#0FFH
00DE 7A00        R     MOV     R2,#HIGH ?SC_84
00E0 7900        R     MOV     R1,#LOW ?SC_84
00E2 850000      E     MOV     ?_printf?BYTE+03H,adr
00E5 850000      E     MOV     ?_printf?BYTE+04H,adr+01H
00E8 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 74
00EB 850082      R     MOV     DPL,ADDR+01H
00EE 850083      R     MOV     DPH,ADDR
00F1 7455              MOV     A,#055H
00F3 F0                MOVX    @DPTR,A
00F4 A3                INC     DPTR
00F5 74AA              MOV     A,#0AAH
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
00F8 7402              MOV     A,#02H
00FA 2500        R     ADD     A,ADDR+01H
00FC F500        R     MOV     ADDR+01H,A
00FE E4                CLR     A
00FF 3500        R     ADDC    A,ADDR
0101 F500        R     MOV     ADDR,A
0103 80C6              SJMP    ?C0008
0105         ?C0009:
                                           ; SOURCE LINE # 78
0105 7BFF              MOV     R3,#0FFH
0107 7A00        R     MOV     R2,#HIGH ?SC_71
0109 7900        R     MOV     R1,#LOW ?SC_71
010B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 79
010E E4                CLR     A
010F F500        R     MOV     ADDR,A
0111 F500        R     MOV     ADDR+01H,A
0113         ?C0011:
0113 AE00        R     MOV     R6,ADDR
0115 AF00        R     MOV     R7,ADDR+01H
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 7   

0117 C3                CLR     C
0118 EF                MOV     A,R7
0119 94FF              SUBB    A,#0FFH
011B EE                MOV     A,R6
011C 941F              SUBB    A,#01FH
011E 504F              JNC     ?C0012
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0120 8E00        R     MOV     adr,R6
0122 8F00        R     MOV     adr+01H,R7
                                           ; SOURCE LINE # 82
0124 7BFF              MOV     R3,#0FFH
0126 7A00        R     MOV     R2,#HIGH ?SC_84
0128 7900        R     MOV     R1,#LOW ?SC_84
012A 850000      E     MOV     ?_printf?BYTE+03H,adr
012D 850000      E     MOV     ?_printf?BYTE+04H,adr+01H
0130 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 84
0133 850082      R     MOV     DPL,ADDR+01H
0136 850083      R     MOV     DPH,ADDR
0139 E0                MOVX    A,@DPTR
013A FE                MOV     R6,A
013B A3                INC     DPTR
013C E0                MOVX    A,@DPTR
013D FF                MOV     R7,A
013E 64AA              XRL     A,#0AAH
0140 7003              JNZ     ?C0033
0142 EE                MOV     A,R6
0143 6455              XRL     A,#055H
0145         ?C0033:
0145 601B              JZ      ?C0013
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0147 750001      E     MOV     ?_printf?BYTE+03H,#01H
014A 850000      E     MOV     ?_printf?BYTE+04H,ADDR
014D 850000      E     MOV     ?_printf?BYTE+05H,ADDR+01H
0150 8E00        E     MOV     ?_printf?BYTE+06H,R6
0152 8F00        E     MOV     ?_printf?BYTE+07H,R7
0154 7BFF              MOV     R3,#0FFH
0156 7A00        R     MOV     R2,#HIGH ?SC_148
0158 7900        R     MOV     R1,#LOW ?SC_148
015A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 87
015D 750002      R     MOV     err,#02H
                                           ; SOURCE LINE # 88
0160 800D              SJMP    ?C0012
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
0162         ?C0013:
0162 7402              MOV     A,#02H
0164 2500        R     ADD     A,ADDR+01H
0166 F500        R     MOV     ADDR+01H,A
0168 E4                CLR     A
0169 3500        R     ADDC    A,ADDR
016B F500        R     MOV     ADDR,A
016D 80A4              SJMP    ?C0011
016F         ?C0012:
                                           ; SOURCE LINE # 92
016F 7BFF              MOV     R3,#0FFH
0171 7A00        R     MOV     R2,#HIGH ?SC_177
0173 7900        R     MOV     R1,#LOW ?SC_177
0175 120000      E     LCALL   _printf
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 8   

                                           ; SOURCE LINE # 94
0178 E4                CLR     A
0179 F500        R     MOV     ADDR,A
017B F500        R     MOV     ADDR+01H,A
                                           ; SOURCE LINE # 95
017D 850082      R     MOV     DPL,ADDR+01H
0180 850083      R     MOV     DPH,ADDR
0183 74AA              MOV     A,#0AAH
0185 F0                MOVX    @DPTR,A
0186 A3                INC     DPTR
0187 7455              MOV     A,#055H
0189 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
018A 7BFF              MOV     R3,#0FFH
018C 7A00        R     MOV     R2,#HIGH ?SC_207
018E 7900        R     MOV     R1,#LOW ?SC_207
0190 850000      E     MOV     ?_printf?BYTE+03H,ADDR
0193 850000      E     MOV     ?_printf?BYTE+04H,ADDR+01H
0196 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 97
0199 850082      R     MOV     DPL,ADDR+01H
019C 850083      R     MOV     DPH,ADDR
019F E0                MOVX    A,@DPTR
01A0 FE                MOV     R6,A
01A1 A3                INC     DPTR
01A2 E0                MOVX    A,@DPTR
01A3 FF                MOV     R7,A
01A4 BEAA0E            CJNE    R6,#0AAH,?C0015
01A7 BF550B            CJNE    R7,#055H,?C0015
                                           ; SOURCE LINE # 98
01AA 7BFF              MOV     R3,#0FFH
01AC 7A00        R     MOV     R2,#HIGH ?SC_222
01AE 7900        R     MOV     R1,#LOW ?SC_222
01B0 120000      E     LCALL   _printf
01B3 8019              SJMP    ?C0016
01B5         ?C0015:
                                           ; SOURCE LINE # 100
01B5 7BFF              MOV     R3,#0FFH
01B7 7A00        R     MOV     R2,#HIGH ?SC_229
01B9 7900        R     MOV     R1,#LOW ?SC_229
01BB 850082      R     MOV     DPL,ADDR+01H
01BE 850083      R     MOV     DPH,ADDR
01C1 E0                MOVX    A,@DPTR
01C2 F500        E     MOV     ?_printf?BYTE+03H,A
01C4 A3                INC     DPTR
01C5 E0                MOVX    A,@DPTR
01C6 F500        E     MOV     ?_printf?BYTE+04H,A
01C8 120000      E     LCALL   _printf
01CB 750003      R     MOV     err,#03H
01CE         ?C0016:
                                           ; SOURCE LINE # 102
01CE E4                CLR     A
01CF F500        R     MOV     i,A
01D1         ?C0017:
01D1 0500        R     INC     i
01D3 E500        R     MOV     A,i
01D5 B4FFF9            CJNE    A,#0FFH,?C0017
01D8         ?C0018:
                                           ; SOURCE LINE # 104
01D8 E4                CLR     A
01D9 F500        R     MOV     j,A
                                           ; SOURCE LINE # 105
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 9   

01DB F500        R     MOV     ADDR,A
01DD 750001      R     MOV     ADDR+01H,#01H
                                           ; SOURCE LINE # 106
01E0 F500        R     MOV     appo,A
01E2 750001      R     MOV     appo+01H,#01H
01E5         ?C0020:
                                           ; SOURCE LINE # 107
01E5 C3                CLR     C
01E6 E500        R     MOV     A,appo
01E8 9420              SUBB    A,#020H
01EA 5079              JNC     ?C0021
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
01EC AE00        R     MOV     R6,ADDR
01EE AF00        R     MOV     R7,ADDR+01H
01F0 8E00        R     MOV     adr,R6
01F2 8F00        R     MOV     adr+01H,R7
                                           ; SOURCE LINE # 110
01F4 7BFF              MOV     R3,#0FFH
01F6 7A00        R     MOV     R2,#HIGH ?SC_239
01F8 7900        R     MOV     R1,#LOW ?SC_239
01FA 8E00        E     MOV     ?_printf?BYTE+03H,R6
01FC 8F00        E     MOV     ?_printf?BYTE+04H,R7
01FE AF00        R     MOV     R7,j
0200 0500        R     INC     j
0202 8F00        E     MOV     ?_printf?BYTE+05H,R7
0204 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 112
0207 850082      R     MOV     DPL,ADDR+01H
020A 850083      R     MOV     DPH,ADDR
020D 74AA              MOV     A,#0AAH
020F F0                MOVX    @DPTR,A
0210 A3                INC     DPTR
0211 7455              MOV     A,#055H
0213 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0214 E4                CLR     A
0215 F500        R     MOV     i,A
0217         ?C0022:
0217 0500        R     INC     i
0219 E500        R     MOV     A,i
021B B4FFF9            CJNE    A,#0FFH,?C0022
021E         ?C0023:
                                           ; SOURCE LINE # 116
021E 850082      R     MOV     DPL,ADDR+01H
0221 850083      R     MOV     DPH,ADDR
0224 E0                MOVX    A,@DPTR
0225 FE                MOV     R6,A
0226 A3                INC     DPTR
0227 E0                MOVX    A,@DPTR
0228 FF                MOV     R7,A
0229 BEAA0E            CJNE    R6,#0AAH,?C0025
022C BF550B            CJNE    R7,#055H,?C0025
                                           ; SOURCE LINE # 117
022F 7BFF              MOV     R3,#0FFH
0231 7A00        R     MOV     R2,#HIGH ?SC_222
0233 7900        R     MOV     R1,#LOW ?SC_222
0235 120000      E     LCALL   _printf
0238 8019              SJMP    ?C0026
023A         ?C0025:
                                           ; SOURCE LINE # 119
023A 7BFF              MOV     R3,#0FFH
C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 10  

023C 7A00        R     MOV     R2,#HIGH ?SC_253
023E 7900        R     MOV     R1,#LOW ?SC_253
0240 850082      R     MOV     DPL,ADDR+01H
0243 850083      R     MOV     DPH,ADDR
0246 E0                MOVX    A,@DPTR
0247 F500        E     MOV     ?_printf?BYTE+03H,A
0249 A3                INC     DPTR
024A E0                MOVX    A,@DPTR
024B F500        E     MOV     ?_printf?BYTE+04H,A
024D 120000      E     LCALL   _printf
0250 750003      R     MOV     err,#03H
0253         ?C0026:
                                           ; SOURCE LINE # 121
0253 E500        R     MOV     A,appo+01H
0255 25E0              ADD     A,ACC
0257 F500        R     MOV     appo+01H,A
0259 E500        R     MOV     A,appo
025B 33                RLC     A
025C F500        R     MOV     appo,A
                                           ; SOURCE LINE # 122
025E F500        R     MOV     ADDR,A
0260 850000      R     MOV     ADDR+01H,appo+01H
                                           ; SOURCE LINE # 123
0263 8080              SJMP    ?C0020
0265         ?C0021:
                                           ; SOURCE LINE # 125
0265 E500        R     MOV     A,err
0267 7BFF              MOV     R3,#0FFH
0269 7006              JNZ     ?C0027
                                           ; SOURCE LINE # 126
026B 7A00        R     MOV     R2,#HIGH ?SC_262
026D 7900        R     MOV     R1,#LOW ?SC_262
026F 8007              SJMP    ?C0034
0271         ?C0027:
                                           ; SOURCE LINE # 128
0271 7A00        R     MOV     R2,#HIGH ?SC_275
0273 7900        R     MOV     R1,#LOW ?SC_275
0275 850000      E     MOV     ?_printf?BYTE+03H,err
0278         ?C0034:
0278 120000      E     LCALL   _printf
027B         ?C0028:
                                           ; SOURCE LINE # 130
027B 7BFF              MOV     R3,#0FFH
027D 7A00        R     MOV     R2,#HIGH ?SC_299
027F 7900        R     MOV     R1,#LOW ?SC_299
0281 120000      E     LCALL   _printf
0284         ?C0029:
                                           ; SOURCE LINE # 131
0284 120000      E     LCALL   getchar
0287 8F00        R     MOV     c,R7
0289 BF0AF8            CJNE    R7,#0AH,?C0029
                                           ; SOURCE LINE # 132
028C         ?C0031:
028C 22                RET     
             ; FUNCTION test_ram (END)

C51 COMPILER V8.05a   TEST_RAM                                                             03/11/2010 12:19:51 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uchar. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ADDR . . . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0000H  2
ushort . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
UINT . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
err. . . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0002H  1
getchar. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
test_ram . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  appo . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  c. . . . . . . . . . . . . . . . . .  AUTO     DATA   CHAR     0004H  1
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
i. . . . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0003H  1
j. . . . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0004H  1
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    653    ----
   CONSTANT SIZE    =    331    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
