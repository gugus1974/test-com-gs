/*  BAL_LINK.H
 ----------------------------------------------------------------------------
|
|   Property of  :   ABB Verkehrssysteme AG, CH-8050 ZÅrich / Switzerland
|   COPYRIGHT    :   (c) 1992 ABB Verkehrssysteme AG
|
 ----------------------------------------------------------------------------
|
|   Project      :   T C N   B U S   A D M I N I S T R A T O R
|
 ----------------------------------------------------------------------------
|
|   File Name    :   BAL_LINK
|
|   Document     :
|
|   Abstract     :   Cyclic MF Transmission
|
|   Remarks      :
|
|   Dependencies :
|
|   Accepted     :
|
 ----------------------------------------------------------------------------
|
|   HISTORY:
|
|   Vers   Dept.   YY-MM-DD  State    Name    Reference
|   ----   ------  --------  -------  ------- ---------
|     0    BAEI-2  93-06-28  created  Marsden
|
 ----------------------------------------------------------------------------
*/

#ifndef     BAL_LINK_H
#define     BAL_LINK_H


#include    "baa_auxi.h"
#include    "bax_incl.h"

#define     BAL_EVENT_ARBITRATION           0
#define     BAL_EVENT_PENDING               1

#define		BAL_MASK_FCODE					0xF000


#if defined (O_BAP)

#define     bal_check_bus_silence        bal_bap_check_bus_silence
#else
#define     bal_check_bus_silence        bal_mvbc_check_bus_silence

#endif




/* new page
 ----------------------------------------------------------------------------
|
|   name    BAL_STR_PL_STATISTIC
|
 --------   A B S T R A C T   -----------------------------------------------

    Each event response is regarded as a message. This statistic
    counts the messages per device address and the message total

*/

struct       BAL_STR_PL_STAT
{
    unsigned long                c_total;
    struct   BA_STR_POLL_STAT    distr;
};


/* new page
 ----------------------------------------------------------------------------
|
|   name    BAC_STR_S....
|
 --------   A B S T R A C T   -----------------------------------------------

    The slot table consists of BAC_SB_CNT of slot blocks. The location of
    slot block is stored in the slot block pointer table.

    Each slot block contains BAC_SL_CNT of slot lists. The location of the
    slot lists is defined by the structure (array).

    Each slot list contains space for BAC_SM_CNT of master frames which are
    transmitted within the slot.

*/
#define     BAL_NCFG_SL_CNT     	64

struct      BAL_STR_SL
{
			unsigned short          sm[16];
};


/* new page
 ----------------------------------------------------------------------------
|
|   name    BAC_STR_C....
|
 --------   A B S T R A C T   -----------------------------------------------

    The configuration generated by BVLCONV is organised in cycles with a
    "configurator" which allocates parts of the cycle lists into slots.

*/

struct      BAL_STR_C1_P
{
            unsigned short       *  p_cm_1ms;
            int                     cm_cnt;
};

struct      BAL_STR_CP_P
{
            unsigned short       *  p_low;
            unsigned short       *  p_hgh;
            struct BA_STR_CFG_SL *  p_ca;
};


struct      BAL_STR_CX_PT
{
            struct  BAL_STR_C1_P    c1[1];
            struct  BAL_STR_CP_P    cp[5];
};

/* new page
 ----------------------------------------------------------------------------
|
|   name    BAL_STR_SL_NXT
|
 --------   A B S T R A C T   -----------------------------------------------

	The configuration generated by BVLCONV is organised in cycles with a
	"configurator" which allocates parts of the cycle lists into slots.

*/

struct		BAL_STR_POLL_COMMON
{
	unsigned short				w_ctrl;
	unsigned short				c_ok;
	unsigned short				c_error;
	  signed short				pack;
};

struct      BAL_STR_DMA
{
	struct	 BAL_STR_SI_NXT  *  p_slt_nxt;
#if defined  (O_BAP)
    union    BAA_UNN_DTA        a_srce;
#elif defined (O_BA_RTS)
    unsigned short *            p_srce;
#else
    unsigned short              a_srce;
#endif
	unsigned short              c_mf;       /* DMA count */
    unsigned short              activate_bad_task;
	unsigned short				t_us;
	unsigned short				w_ctrl;		/* control word DMA    */
};

struct      BAL_STR_RTS
{
    struct BAL_STR_RTS * p_nxt_rts;
    unsigned short *     p_dma_buffer;
    unsigned short       a_srce;
};

struct      BAL_STR_POLL
{
	struct  BAL_STR_SI_NXT *	p_nxt;
	unsigned short *            p_mf;
};

struct      BAL_STR_SI_NXT
{
	struct	 BAL_STR_DMA		dma;		    /* cyclic part of bll       */
	struct	 BAL_STR_POLL       poll;           /* event poll part of bll   */
};

struct		 BAL_STR_SI_CFGD
{
	struct  BAL_STR_SI_NXT *		p_lst_but_one;
	struct  BAL_STR_SI_NXT *		p_lst;
	unsigned short					c_tmr1;
	unsigned short              	c_64ms;
	unsigned short					c_tick;     /* system tick */
};


struct      BAL_STR_RA
{
	unsigned short  c_ountdown;
	unsigned short  c_reference;
};

#define     BAL_C_Q					20

struct BAL_STR_RSP
{
	   unsigned short       r_sf;
	   unsigned short		state;
};
struct      BAL_STR_Q
{
            struct BAL_STR_RSP      rsp;
			unsigned short			n_pf;
			unsigned short			c_sf;
			unsigned short			a_sf[BAL_C_Q];
};



/*  new page
 ----------------------------------------------------------------------------
|
|   name        BAL_STR_IO_PORT
|
 ------------   A B S T R A C T   -------------------------------------------

	The variable io_port.dma stores the dma address:

	It is initialised during the transition to bus master,
	evaluated and modified by the bac_timer1_handler () and
	evaluated by the bap_dma_empty_handler ()

*/

struct      BAL_STR_IO_PORT
{
	unsigned short  act_dma;
};



/* new page
 ----------------------------------------------------------------------------
|
|   name	system timer emulation
|
 --------   A B S T R A C T   -----------------------------------------------


*/

#define		BAL_SYS_TMR_FACTOR			4
#define		BAL_SYS_TMR_NCFG_TICK		5
#define		BAL_SYS_TMR_32MS_TICKS      (BAL_SYS_TMR_FACTOR * 32)
#define		BAL_SYS_TMR_64MS_TICKS      (BAL_SYS_TMR_FACTOR * 64)
#define		BAL_SYS_TMR_80MS_TICKS      (BAL_SYS_TMR_FACTOR * 80)

struct		BAL_STR_SYS_TMR
{
			unsigned short	c_64ms;
			unsigned short	c_tick;
};

/*  new page
 ----------------------------------------------------------------------------
|
|   name        BAL_STR_DBUG
|
 ------------   A B S T R A C T   -------------------------------------------


*/

struct      BAL_STR_DBUG
{
	unsigned short	rslt;
	unsigned short	func;
	unsigned short  cfgd_bm;
	unsigned short  ncfg_bm;
	unsigned short  tmr1_ra;
	unsigned short  boss_st;
	unsigned short	c_tmr1;
	unsigned short	c_trans_2_bm;
	unsigned short	c_dma_empty;
	unsigned short  c_ra[64];
};


//#include "bah_hwre.h"

struct		 BAL_STR_SI_NCFG
{
	struct   BAL_STR_SI_NXT *		p_lst;
	unsigned short					c_tmr1;
	unsigned short              	c_64ms;
	unsigned short					b_cycle;
	struct   BAL_STR_SI_NXT	   		cb[BAL_NCFG_SL_CNT];
};


/* new page
 ----------------------------------------------------------------------------
|
|   name        BAL_STR_DTA         static data
|
 ------------   A B S T R A C T   -------------------------------------------

*/

struct       BAL_STR_DTA
{
	struct	 BAL_STR_DBUG			dbug;
#if (0)
	struct   BAA_STR_SPY			spy[BAA_SPY_ID_BAL_CNT];
#endif
      signed short                  sema_id;
      signed short                  state;
	unsigned short                  mf_padding;
	unsigned short                  mf_transfer;
	unsigned short                  reg_48;
    unsigned short                  has_been_bm_already;
    unsigned                        t_max;
    unsigned                        c_emf;
    unsigned                        c_emf_ref;
    struct   BAL_STR_PL_STAT        pl_stat;
	struct   BAL_STR_IO_PORT     	io_port;
	struct   BAL_STR_RA          	ra;
	struct	 BAL_STR_POLL_COMMON	poll_common;
	struct	 BAL_STR_Q				q_sf;
	struct	 BAL_STR_SYS_TMR		sys_tmr;
	struct   BAL_STR_SI_NXT *      	p_si_dma;
	struct   BAL_STR_SI_NXT *      	p_si_poll;
	struct	 BAL_STR_SI_CFGD		cfgd;
	struct	 BAL_STR_SI_NCFG		ncfg;
    struct   BAL_STR_SI_NXT         nivana_slot;
	struct   BAL_STR_SI_NXT        	slot[1024];
                                        #if defined (O_BA_RTS)
    struct   BAL_STR_RTS            rts_cfgd[4];
    struct   BAL_STR_RTS            rts_ncfg[4];
    struct   BAL_STR_RTS *          p_rts;
    unsigned short       *          p_rts_mf;
                                        #endif
};


#define     BAL_NO              0
#define     BAL_A_64MS          1



/* new page
 ----------------------------------------------------------------------------
|
|   name	debug auxiliary
|
 --------   A B S T R A C T   -----------------------------------------------

	These functions are only known in debug mode (BX_SIMU)

*/

#if defined (BX_SIMU) || defined (BX_DBUG)

#define	BAL_DBUG_CFGD_BM	1
#define BAL_DBUG_NCFG_BM	2
#define BAL_DBUG_TMR1_RA	3
#define	BAL_DBUG_BOSS_ST	4

#define		bal_dbug_tmr1_bm_cfgd_called()	{bal_dta.dbug.func = BAL_DBUG_CFGD_BM;\
											 bal_dta.dbug.cfgd_bm++;}
#define		bal_dbug_tmr1_bm_ncfg_called()	{bal_dta.dbug.func = BAL_DBUG_NCFG_BM;\
											 bal_dta.dbug.ncfg_bm++;}
#define		bal_dbug_tmr1_ra_called()                \
			{ unsigned short ix;                     \
				bal_dta.dbug.func = BAL_DBUG_TMR1_RA;\
				ix = bal_dta.dbug.tmr1_ra++ < 64 ? bal_dta.dbug.tmr1_ra : 63;\
				bal_dta.dbug.c_ra[ix] = bal_dta.ra.c_ountdown; }

#define		bal_dbug_boss_st_called()		{bal_dta.dbug.boss_st++;}

#else

#define     bal_dbug_tmr1_bm_cfgd_called()  {;}
#define     bal_dbug_tmr1_bm_ncfg_called()  {;}
#define     bal_dbug_tmr1_ra_called()   	{;}
#define     bal_dbug_boss_st_called()   	{;}
#endif

/* new page
 ----------------------------------------------------------------------------
|
|   name	Handshake DMA - POLL
|
 --------   A B S T R A C T   -----------------------------------------------

*/

#define		BAL_PL_PACK_RDY			0
#define		BAL_PL_PACK_ERROR       8




/* new page
 ----------------------------------------------------------------------------
|
|   name    prototypes
|
 --------   A B S T R A C T   -----------------------------------------------

    These functions are known by other modules of the BA project.

*/

void        bal_open                (struct BAL_STR_DTA **      p_bll);

void        bal_create              (struct BAM_STR_CFG_PT *    p_pt);

void        bal_init                (void);

void        bal_st_2_bm             (unsigned short     cfg_state);

short		bal_bm_go				(unsigned short     chk_silence);

void        bal_bm_cont             (void);

void        bal_dummy_1             (unsigned short);
void        bal_st_2_ra             (void);
void        bal_st_2_ra_end         (void);
void        bal_go                  (void);

short       bal_tmr1_ra             (void);


short       bal_tmr1_bm_cfgd        (void);

void   		bal_dma_empty			(void);

short       bal_bap_check_bus_silence   (void);

short       bal_mvbc_check_bus_silence   (void);
void        bal_mvbc_tmr1_ra             (unsigned short not_used  );
void        bal_mvbc_amfx                (unsigned short not_used_2);
void        bal_mvbc_error_frame_counter (unsigned short not_used_2);

void		bal_slot_put_mf_cnt 	(unsigned short		c_slot,
									 unsigned short 	mf_cnt);
void		bal_slot_put_us_cnt 	(unsigned short 	c_slot,
									 unsigned short		t_slot);
void        bal_task                (void);

void		bal_pl_q_put_n_pf 		(unsigned short		n_pf);

void		bal_pl_activate			(void);

short       bal_pl_s_mf		     	(void);

void		bal_pl_eat_time         (void);

void        bal_pl_q_event    		(void);

void		bal_pl_q_2_bus			(void);

void        bal_sema_id_announce    (short  q_id);

void        bal_prepare_m_transfer  (void);

short       bal_reset               (void);

void        bal_slot_time           (unsigned *          p_t_slot,
                                     struct BAL_STR_SL * p_sl,
                                     unsigned            c_mf);

void        bal_pl_statistic    (unsigned long *              p_c_event_total,
                                 struct BA_STR_POLL_STAT    * p_stat);
int         bal_init_cpt        (struct BAL_STR_CX_PT *    p_pt,
                                 struct BA_STR_BA_CFG *    p_bax_cfg);
#endif
